import discord
from discord.ext import commands
import asyncio
import datetime
import random
import logging
import math
from typing import Dict, List

from database.mongo_handler import get_user_or_create, update_user, add_user_linh_thach, add_user_exp
from config import (
    CULTIVATION_REALMS, COMBAT_COOLDOWN, DANHQUAI_COOLDOWN, DANHBOSS_COOLDOWN,
    QUAI_MIN_REWARD, QUAI_MAX_REWARD, BOSS_MIN_REWARD, BOSS_MAX_REWARD,
    COMBAT_WIN_REWARD, EMBED_COLOR, EMBED_COLOR_SUCCESS, EMBED_COLOR_ERROR,
    EMOJI_ATTACK, EMOJI_DEFENSE, EMOJI_HEALTH, EMOJI_LINH_THACH, EMOJI_EXP,
    get_power_multiplier
)

# C·∫•u h√¨nh logging
logger = logging.getLogger("tutien-bot.combat")


class CombatCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

        # Danh s√°ch qu√°i v·∫≠t
        self.monsters = [
            {"name": "Y√™u Lang", "level": 1, "health": 100, "attack": 15, "defense": 5},
            {"name": "H·∫Øc H·ªï", "level": 2, "health": 150, "attack": 25, "defense": 10},
            {"name": "ƒê·ªôc X√†", "level": 3, "health": 200, "attack": 30, "defense": 15},
            {"name": "Thi·∫øt Gi√°p Th√∫", "level": 4, "health": 250, "attack": 35, "defense": 25},
            {"name": "U Linh", "level": 5, "health": 300, "attack": 40, "defense": 20},
            {"name": "H·ªèa K·ª≥ L√¢n", "level": 6, "health": 350, "attack": 50, "defense": 30},
            {"name": "B·∫°ch C·ªët Ma", "level": 7, "health": 400, "attack": 60, "defense": 35},
            {"name": "Th√¢m H·∫£i Chi Long", "level": 8, "health": 500, "attack": 70, "defense": 40},
            {"name": "Huy·∫øt Y√™u", "level": 9, "health": 600, "attack": 80, "defense": 50},
            {"name": "Thi√™n Ma", "level": 10, "health": 700, "attack": 90, "defense": 60},
        ]

        # Danh s√°ch boss
        self.bosses = [
            {"name": "H·∫Øc Long V∆∞∆°ng", "level": 15, "health": 1000, "attack": 120, "defense": 80},
            {"name": "C·ª≠u Vƒ© Y√™u H·ªì", "level": 18, "health": 1500, "attack": 150, "defense": 100},
            {"name": "Ma ƒê·∫ø", "level": 20, "health": 2000, "attack": 180, "defense": 120},
            {"name": "T√† Th·∫ßn", "level": 25, "health": 3000, "attack": 250, "defense": 150},
            {"name": "Thi√™n Ngo·∫°i Y√™u Thi", "level": 30, "health": 5000, "attack": 350, "defense": 200},
        ]

    def get_random_monster(self, user_realm_id):
        """L·∫•y m·ªôt qu√°i v·∫≠t ng·∫´u nhi√™n d·ª±a tr√™n c·∫£nh gi·ªõi c·ªßa ng∆∞·ªùi d√πng"""
        # X√°c ƒë·ªãnh ph·∫°m vi c·∫•p ƒë·ªô qu√°i v·∫≠t
        min_level = max(1, user_realm_id // 3)
        max_level = min(len(self.monsters), min_level + 3)

        # L·ªçc qu√°i v·∫≠t trong ph·∫°m vi
        suitable_monsters = [m for m in self.monsters if min_level <= m["level"] <= max_level]

        # N·∫øu kh√¥ng c√≥ qu√°i v·∫≠t ph√π h·ª£p, l·∫•y con y·∫øu nh·∫•t
        if not suitable_monsters:
            return self.monsters[0]

        # Tr·∫£ v·ªÅ qu√°i v·∫≠t ng·∫´u nhi√™n
        return random.choice(suitable_monsters)

    def get_random_boss(self, user_realm_id):
        """L·∫•y m·ªôt boss ng·∫´u nhi√™n d·ª±a tr√™n c·∫£nh gi·ªõi c·ªßa ng∆∞·ªùi d√πng"""
        # X√°c ƒë·ªãnh ph·∫°m vi c·∫•p ƒë·ªô boss
        min_level = max(15, (user_realm_id * 2) // 3)

        # L·ªçc boss trong ph·∫°m vi
        suitable_bosses = [b for b in self.bosses if b["level"] >= min_level]

        # N·∫øu kh√¥ng c√≥ boss ph√π h·ª£p, l·∫•y con y·∫øu nh·∫•t
        if not suitable_bosses:
            return self.bosses[0]

        # Tr·∫£ v·ªÅ boss ng·∫´u nhi√™n
        return random.choice(suitable_bosses)

    def calculate_damage(self, attacker, defender):
        """T√≠nh to√°n s√°t th∆∞∆°ng"""
        base_damage = max(1, attacker["attack"] - (defender["defense"] // 2))

        # Th√™m y·∫øu t·ªë ng·∫´u nhi√™n (+-20%)
        random_factor = random.uniform(0.8, 1.2)

        # T√≠nh to√°n s√°t th∆∞∆°ng cu·ªëi c√πng
        damage = int(base_damage * random_factor)

        # Crit (10% c∆° h·ªôi)
        is_crit = random.random() < 0.1
        if is_crit:
            damage = int(damage * 1.5)

        return damage, is_crit

    async def simulate_combat(self, ctx, user, enemy, is_boss=False):
        """M√¥ ph·ªèng chi·∫øn ƒë·∫•u gi·ªØa ng∆∞·ªùi d√πng v√† qu√°i v·∫≠t/boss"""
        # T·∫°o embed cho tr·∫≠n ƒë·∫•u
        embed = discord.Embed(
            title=f"‚öîÔ∏è {ctx.author.display_name} ƒë·ªëi ƒë·∫ßu v·ªõi {enemy['name']}",
            description=f"Tr·∫≠n chi·∫øn b·∫Øt ƒë·∫ßu!",
            color=EMBED_COLOR
        )

        # Th√¥ng tin ng∆∞·ªùi ch∆°i
        player = {
            "name": ctx.author.display_name,
            "health": user["health"],
            "attack": user["attack"],
            "defense": user["defense"],
            "realm_id": user["realm_id"]
        }

        # √Åp d·ª•ng h·ªá s·ªë s·ª©c m·∫°nh theo c·∫£nh gi·ªõi
        power_multiplier = get_power_multiplier(player["realm_id"])
        player["attack"] = int(player["attack"] * power_multiplier)
        player["defense"] = int(player["defense"] * power_multiplier)
        player["health"] = int(player["health"] * power_multiplier)

        # Th√™m th√¥ng tin ng∆∞·ªùi ch∆°i v√† qu√°i v·∫≠t
        embed.add_field(
            name=f"{player['name']} [{CULTIVATION_REALMS[player['realm_id']]['name']}]",
            value=f"{EMOJI_HEALTH} HP: {player['health']}\n{EMOJI_ATTACK} T·∫•n c√¥ng: {player['attack']}\n{EMOJI_DEFENSE} Ph√≤ng th·ªß: {player['defense']}",
            inline=True
        )

        embed.add_field(
            name=f"{enemy['name']} [C·∫•p {enemy['level']}]",
            value=f"{EMOJI_HEALTH} HP: {enemy['health']}\n{EMOJI_ATTACK} T·∫•n c√¥ng: {enemy['attack']}\n{EMOJI_DEFENSE} Ph√≤ng th·ªß: {enemy['defense']}",
            inline=True
        )

        # G·ª≠i th√¥ng tin ban ƒë·∫ßu
        message = await ctx.send(embed=embed)

        # M√¥ ph·ªèng chi·∫øn ƒë·∫•u
        round_num = 1
        player_hp = player["health"]
        enemy_hp = enemy["health"]
        battle_log = []

        while player_hp > 0 and enemy_hp > 0:
            # Ng∆∞·ªùi ch∆°i t·∫•n c√¥ng tr∆∞·ªõc
            damage, is_crit = self.calculate_damage(player, enemy)
            enemy_hp = max(0, enemy_hp - damage)

            # T·∫°o log
            crit_text = " (Ch√≠ m·∫°ng!)" if is_crit else ""
            battle_log.append(
                f"üî∂ **L∆∞·ª£t {round_num}:** {player['name']} g√¢y ra {damage} s√°t th∆∞∆°ng{crit_text}. {enemy['name']} c√≤n {enemy_hp} HP.")

            # N·∫øu qu√°i v·∫≠t ch·∫øt, k·∫øt th√∫c
            if enemy_hp <= 0:
                break

            # Qu√°i v·∫≠t t·∫•n c√¥ng
            damage, is_crit = self.calculate_damage(enemy, player)
            player_hp = max(0, player_hp - damage)

            # T·∫°o log
            crit_text = " (Ch√≠ m·∫°ng!)" if is_crit else ""
            battle_log.append(
                f"üî∑ **L∆∞·ª£t {round_num}:** {enemy['name']} g√¢y ra {damage} s√°t th∆∞∆°ng{crit_text}. {player['name']} c√≤n {player_hp} HP.")

            # TƒÉng s·ªë l∆∞·ª£t
            round_num += 1

            # C·∫≠p nh·∫≠t embed
            embed.description = "\n".join(battle_log[-5:])  # Ch·ªâ hi·ªÉn th·ªã 5 l∆∞·ª£t g·∫ßn nh·∫•t
            embed.set_field_at(0,
                               name=f"{player['name']} [{CULTIVATION_REALMS[player['realm_id']]['name']}]",
                               value=f"{EMOJI_HEALTH} HP: {player_hp}/{player['health']}\n{EMOJI_ATTACK} T·∫•n c√¥ng: {player['attack']}\n{EMOJI_DEFENSE} Ph√≤ng th·ªß: {player['defense']}",
                               inline=True
                               )
            embed.set_field_at(1,
                               name=f"{enemy['name']} [C·∫•p {enemy['level']}]",
                               value=f"{EMOJI_HEALTH} HP: {enemy_hp}/{enemy['health']}\n{EMOJI_ATTACK} T·∫•n c√¥ng: {enemy['attack']}\n{EMOJI_DEFENSE} Ph√≤ng th·ªß: {enemy['defense']}",
                               inline=True
                               )

            # C·∫≠p nh·∫≠t tin nh·∫Øn
            await message.edit(embed=embed)

            # T·∫°m d·ª´ng ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng
            await asyncio.sleep(1)

        # X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
        if player_hp > 0:
            # T√≠nh to√°n ph·∫ßn th∆∞·ªüng
            if is_boss:
                linh_thach = random.randint(BOSS_MIN_REWARD, BOSS_MAX_REWARD)
                exp = enemy["level"] * 50
            else:
                linh_thach = random.randint(QUAI_MIN_REWARD, QUAI_MAX_REWARD)
                exp = enemy["level"] * 20

            # C·ªông ph·∫ßn th∆∞·ªüng
            await add_user_linh_thach(ctx.author.id, linh_thach)

            # C·ªông kinh nghi·ªám
            cultivation_cog = self.bot.get_cog("CultivationCog")
            if cultivation_cog:
                success, new_realm = await cultivation_cog.add_exp(ctx.author.id, exp, f"ƒë√°nh b·∫°i {enemy['name']}")

                # Th√¥ng b√°o ƒë·ªôt ph√° n·∫øu c√≥
                if success:
                    breakthrough_text = f"\n{EMOJI_LEVEL_UP} Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·ªôt ph√° l√™n **{new_realm}**!"
                else:
                    breakthrough_text = ""
            else:
                breakthrough_text = ""
                await add_user_exp(ctx.author.id, exp)

            # C·∫≠p nh·∫≠t embed
            embed.color = EMBED_COLOR_SUCCESS
            embed.description = f"**{player['name']} ƒë√£ chi·∫øn th·∫Øng {enemy['name']} sau {round_num} l∆∞·ª£t!**\n\n" + "\n".join(
                battle_log[-3:])
            embed.add_field(
                name="Ph·∫ßn th∆∞·ªüng",
                value=f"{EMOJI_LINH_THACH} **+{linh_thach}** linh th·∫°ch\n{EMOJI_EXP} **+{exp}** kinh nghi·ªám{breakthrough_text}",
                inline=False
            )
        else:
            # C·∫≠p nh·∫≠t embed khi thua
            embed.color = EMBED_COLOR_ERROR
            embed.description = f"**{player['name']} ƒë√£ th·∫•t b·∫°i tr∆∞·ªõc {enemy['name']} sau {round_num} l∆∞·ª£t!**\n\n" + "\n".join(
                battle_log[-3:])

        # C·∫≠p nh·∫≠t tin nh·∫Øn cu·ªëi c√πng
        await message.edit(embed=embed)

        # Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return player_hp > 0

    @commands.command(name="danhquai", aliases=["dq", "hunt"])
    async def hunt_monster(self, ctx):
        """ƒê√°nh qu√°i v·∫≠t ƒë·ªÉ nh·∫≠n linh th·∫°ch v√† kinh nghi·ªám"""
        # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        user = await get_user_or_create(ctx.author.id, ctx.author.name)

        # Ki·ªÉm tra cooldown
        now = datetime.datetime.now()
        last_hunt = user.get("last_danhquai")

        if last_hunt:
            last_hunt = datetime.datetime.fromisoformat(last_hunt)
            time_diff = (now - last_hunt).total_seconds()

            if time_diff < DANHQUAI_COOLDOWN:
                remaining = DANHQUAI_COOLDOWN - time_diff
                minutes, seconds = divmod(int(remaining), 60)

                embed = discord.Embed(
                    title="‚è≥ Cooldown",
                    description=f"B·∫°n c·∫ßn ngh·ªâ ng∆°i **{minutes} ph√∫t {seconds} gi√¢y** n·ªØa m·ªõi c√≥ th·ªÉ ƒë√°nh qu√°i ti·∫øp!",
                    color=EMBED_COLOR_ERROR
                )

                return await ctx.send(embed=embed)

        # L·∫•y qu√°i v·∫≠t ng·∫´u nhi√™n
        monster = self.get_random_monster(user["realm_id"])

        # M√¥ ph·ªèng chi·∫øn ƒë·∫•u
        result = await self.simulate_combat(ctx, user, monster)

        # C·∫≠p nh·∫≠t th·ªùi gian ƒë√°nh qu√°i
        await update_user(ctx.author.id, {"last_danhquai": now.isoformat()})

    @commands.command(name="danhboss", aliases=["db", "boss"])
    async def hunt_boss(self, ctx):
        """ƒê√°nh boss ƒë·ªÉ nh·∫≠n nhi·ªÅu linh th·∫°ch v√† kinh nghi·ªám h∆°n"""
        # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        user = await get_user_or_create(ctx.author.id, ctx.author.name)

        # Ki·ªÉm tra cooldown
        now = datetime.datetime.now()
        last_boss = user.get("last_danhboss")

        if last_boss:
            last_boss = datetime.datetime.fromisoformat(last_boss)
            time_diff = (now - last_boss).total_seconds()

            if time_diff < DANHBOSS_COOLDOWN:
                remaining = DANHBOSS_COOLDOWN - time_diff
                minutes, seconds = divmod(int(remaining), 60)

                embed = discord.Embed(
                    title="‚è≥ Cooldown",
                    description=f"B·∫°n c·∫ßn ngh·ªâ ng∆°i **{minutes} ph√∫t {seconds} gi√¢y** n·ªØa m·ªõi c√≥ th·ªÉ ƒë√°nh boss ti·∫øp!",
                    color=EMBED_COLOR_ERROR
                )

                return await ctx.send(embed=embed)

        # L·∫•y boss ng·∫´u nhi√™n
        boss = self.get_random_boss(user["realm_id"])

        # M√¥ ph·ªèng chi·∫øn ƒë·∫•u
        result = await self.simulate_combat(ctx, user, boss, is_boss=True)

        # C·∫≠p nh·∫≠t th·ªùi gian ƒë√°nh boss
        await update_user(ctx.author.id, {"last_danhboss": now.isoformat()})

    @commands.command(name="combat", aliases=["pvp", "pk"])
    async def combat_pvp(self, ctx, opponent: discord.Member = None):
        """Th√°ch ƒë·∫•u PvP v·ªõi ng∆∞·ªùi ch∆°i kh√°c"""
        # Ki·ªÉm tra xem c√≥ ch·ªâ ƒë·ªãnh ƒë·ªëi th·ªß kh√¥ng
        if not opponent:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="B·∫°n c·∫ßn ch·ªâ ƒë·ªãnh ng∆∞·ªùi ch∆°i ƒë·ªÉ th√°ch ƒë·∫•u!\nV√≠ d·ª•: `!combat @t√™n_ng∆∞·ªùi_ch∆°i`",
                color=EMBED_COLOR_ERROR
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra kh√¥ng th√°ch ƒë·∫•u ch√≠nh m√¨nh
        if opponent.id == ctx.author.id:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="B·∫°n kh√¥ng th·ªÉ th√°ch ƒë·∫•u ch√≠nh m√¨nh!",
                color=EMBED_COLOR_ERROR
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra kh√¥ng th√°ch ƒë·∫•u bot
        if opponent.bot:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="B·∫°n kh√¥ng th·ªÉ th√°ch ƒë·∫•u v·ªõi bot!",
                color=EMBED_COLOR_ERROR
            )
            return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        user = await get_user_or_create(ctx.author.id, ctx.author.name)

        # Ki·ªÉm tra cooldown
        now = datetime.datetime.now()
        last_combat = user.get("last_combat")

        if last_combat:
            last_combat = datetime.datetime.fromisoformat(last_combat)
            time_diff = (now - last_combat).total_seconds()

            if time_diff < COMBAT_COOLDOWN:
                remaining = COMBAT_COOLDOWN - time_diff
                minutes, seconds = divmod(int(remaining), 60)

                embed = discord.Embed(
                    title="‚è≥ Cooldown",
                    description=f"B·∫°n c·∫ßn ngh·ªâ ng∆°i **{minutes} ph√∫t {seconds} gi√¢y** n·ªØa m·ªõi c√≥ th·ªÉ th√°ch ƒë·∫•u ti·∫øp!",
                    color=EMBED_COLOR_ERROR
                )

                return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin ƒë·ªëi th·ªß
        opponent_user = await get_user_or_create(opponent.id, opponent.name)

        # T·∫°o embed th√°ch ƒë·∫•u
        embed = discord.Embed(
            title="‚öîÔ∏è Th√°ch ƒê·∫•u PvP",
            description=f"{ctx.author.mention} ƒë√£ th√°ch ƒë·∫•u {opponent.mention}!\n{opponent.mention} c√≥ 60 gi√¢y ƒë·ªÉ ch·∫•p nh·∫≠n ho·∫∑c t·ª´ ch·ªëi.",
            color=EMBED_COLOR
        )

        # Th√™m th√¥ng tin ng∆∞·ªùi ch∆°i
        player_realm = CULTIVATION_REALMS[user["realm_id"]]["name"]
        opponent_realm = CULTIVATION_REALMS[opponent_user["realm_id"]]["name"]

        embed.add_field(
            name=f"{ctx.author.display_name} [{player_realm}]",
            value=f"{EMOJI_HEALTH} HP: {user['health']}\n{EMOJI_ATTACK} T·∫•n c√¥ng: {user['attack']}\n{EMOJI_DEFENSE} Ph√≤ng th·ªß: {user['defense']}",
            inline=True
        )

        embed.add_field(
            name=f"{opponent.display_name} [{opponent_realm}]",
            value=f"{EMOJI_HEALTH} HP: {opponent_user['health']}\n{EMOJI_ATTACK} T·∫•n c√¥ng: {opponent_user['attack']}\n{EMOJI_DEFENSE} Ph√≤ng th·ªß: {opponent_user['defense']}",
            inline=True
        )

        # G·ª≠i tin nh·∫Øn th√°ch ƒë·∫•u
        challenge_msg = await ctx.send(embed=embed)

        # Th√™m reaction cho ng∆∞·ªùi ch∆°i ch·ªçn
        await challenge_msg.add_reaction("‚úÖ")  # ƒê·ªìng √Ω
        await challenge_msg.add_reaction("‚ùå")  # T·ª´ ch·ªëi

        # H√†m ki·ªÉm tra reaction
        def check(reaction, user):
            return user.id == opponent.id and str(reaction.emoji) in ["‚úÖ",
                                                                      "‚ùå"] and reaction.message.id == challenge_msg.id

        try:
            # Ch·ªù ph·∫£n ·ª©ng
            reaction, user = await self.bot.wait_for("reaction_add", timeout=60.0, check=check)

            # N·∫øu t·ª´ ch·ªëi
            if str(reaction.emoji) == "‚ùå":
                embed.description = f"{opponent.display_name} ƒë√£ t·ª´ ch·ªëi th√°ch ƒë·∫•u!"
                embed.color = EMBED_COLOR_ERROR
                await challenge_msg.edit(embed=embed)
                return

            # N·∫øu ƒë·ªìng √Ω, b·∫Øt ƒë·∫ßu chi·∫øn ƒë·∫•u
            embed.description = f"{opponent.display_name} ƒë√£ ch·∫•p nh·∫≠n th√°ch ƒë·∫•u! Tr·∫≠n chi·∫øn b·∫Øt ƒë·∫ßu!"
            await challenge_msg.edit(embed=embed)

            # Chu·∫©n b·ªã th√¥ng tin ng∆∞·ªùi ch∆°i
            player = {
                "name": ctx.author.display_name,
                "health": user["health"],
                "attack": user["attack"],
                "defense": user["defense"],
                "realm_id": user["realm_id"]
            }

            opponent_player = {
                "name": opponent.display_name,
                "health": opponent_user["health"],
                "attack": opponent_user["attack"],
                "defense": opponent_user["defense"],
                "realm_id": opponent_user["realm_id"]
            }

            # √Åp d·ª•ng h·ªá s·ªë s·ª©c m·∫°nh theo c·∫£nh gi·ªõi
            player_multiplier = get_power_multiplier(player["realm_id"])
            player["attack"] = int(player["attack"] * player_multiplier)
            player["defense"] = int(player["defense"] * player_multiplier)
            player["health"] = int(player["health"] * player_multiplier)

            opponent_multiplier = get_power_multiplier(opponent_player["realm_id"])
            opponent_player["attack"] = int(opponent_player["attack"] * opponent_multiplier)
            opponent_player["defense"] = int(opponent_player["defense"] * opponent_multiplier)
            opponent_player["health"] = int(opponent_player["health"] * opponent_multiplier)

            # M√¥ ph·ªèng chi·∫øn ƒë·∫•u
            round_num = 1
            player_hp = player["health"]
            opponent_hp = opponent_player["health"]
            battle_log = []

            # Ai c√≥ t·ªëc ƒë·ªô cao h∆°n s·∫Ω ƒë√°nh tr∆∞·ªõc (d·ª±a tr√™n c·∫£nh gi·ªõi)
            player_goes_first = player["realm_id"] >= opponent_player["realm_id"]

            while player_hp > 0 and opponent_hp > 0:
                # X√°c ƒë·ªãnh th·ª© t·ª± t·∫•n c√¥ng
                if player_goes_first:
                    first_attacker, second_attacker = player, opponent_player
                    first_hp, second_hp = player_hp, opponent_hp
                else:
                    first_attacker, second_attacker = opponent_player, player
                    first_hp, second_hp = opponent_hp, player_hp

                # Ng∆∞·ªùi ƒë√°nh tr∆∞·ªõc t·∫•n c√¥ng
                damage, is_crit = self.calculate_damage(first_attacker, second_attacker)
                second_hp = max(0, second_hp - damage)

                # T·∫°o log
                crit_text = " (Ch√≠ m·∫°ng!)" if is_crit else ""
                battle_log.append(
                    f"üî∂ **L∆∞·ª£t {round_num}:** {first_attacker['name']} g√¢y ra {damage} s√°t th∆∞∆°ng{crit_text}. {second_attacker['name']} c√≤n {second_hp} HP.")

                # N·∫øu ng∆∞·ªùi th·ª© hai ch·∫øt, k·∫øt th√∫c
                if second_hp <= 0:
                    break

                # Ng∆∞·ªùi th·ª© hai t·∫•n c√¥ng
                damage, is_crit = self.calculate_damage(second_attacker, first_attacker)
                first_hp = max(0, first_hp - damage)

                # T·∫°o log
                crit_text = " (Ch√≠ m·∫°ng!)" if is_crit else ""
                battle_log.append(
                    f"üî∑ **L∆∞·ª£t {round_num}:** {second_attacker['name']} g√¢y ra {damage} s√°t th∆∞∆°ng{crit_text}. {first_attacker['name']} c√≤n {first_hp} HP.")

                # C·∫≠p nh·∫≠t HP
                if player_goes_first:
                    player_hp, opponent_hp = first_hp, second_hp
                else:
                    opponent_hp, player_hp = first_hp, second_hp

                # TƒÉng s·ªë l∆∞·ª£t
                round_num += 1

                # C·∫≠p nh·∫≠t embed
                embed.description = "\n".join(battle_log[-5:])  # Ch·ªâ hi·ªÉn th·ªã 5 l∆∞·ª£t g·∫ßn nh·∫•t
                embed.set_field_at(0,
                                   name=f"{player['name']} [{CULTIVATION_REALMS[player['realm_id']]['name']}]",
                                   value=f"{EMOJI_HEALTH} HP: {player_hp}/{player['health']}\n{EMOJI_ATTACK} T·∫•n c√¥ng: {player['attack']}\n{EMOJI_DEFENSE} Ph√≤ng th·ªß: {player['defense']}",
                                   inline=True
                                   )
                embed.set_field_at(1,
                                   name=f"{opponent_player['name']} [{CULTIVATION_REALMS[opponent_player['realm_id']]['name']}]",
                                   value=f"{EMOJI_HEALTH} HP: {opponent_hp}/{opponent_player['health']}\n{EMOJI_ATTACK} T·∫•n c√¥ng: {opponent_player['attack']}\n{EMOJI_DEFENSE} Ph√≤ng th·ªß: {opponent_player['defense']}",
                                   inline=True
                                   )

                # C·∫≠p nh·∫≠t tin nh·∫Øn
                await challenge_msg.edit(embed=embed)

                # T·∫°m d·ª´ng ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng
                await asyncio.sleep(1)

            # X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
            if player_hp > 0:
                winner = ctx.author
                loser = opponent
                winner_user = user

                # C·∫≠p nh·∫≠t embed
                embed.color = EMBED_COLOR_SUCCESS
                embed.description = f"**{player['name']} ƒë√£ chi·∫øn th·∫Øng {opponent_player['name']} sau {round_num} l∆∞·ª£t!**\n\n" + "\n".join(
                    battle_log[-3:])
            else:
                winner = opponent
                loser = ctx.author
                winner_user = opponent_user

                # C·∫≠p nh·∫≠t embed
                embed.color = EMBED_COLOR_ERROR
                embed.description = f"**{opponent_player['name']} ƒë√£ chi·∫øn th·∫Øng {player['name']} sau {round_num} l∆∞·ª£t!**\n\n" + "\n".join(
                    battle_log[-3:])

            # Th∆∞·ªüng linh th·∫°ch cho ng∆∞·ªùi th·∫Øng
            await add_user_linh_thach(winner.id, COMBAT_WIN_REWARD)

            # Th√™m kinh nghi·ªám cho c·∫£ hai
            cultivation_cog = self.bot.get_cog("CultivationCog")
            if cultivation_cog:
                # Ng∆∞·ªùi th·∫Øng nh·∫≠n nhi·ªÅu kinh nghi·ªám h∆°n
                win_exp = 50
                lose_exp = 20

                # Th√™m kinh nghi·ªám v√† ki·ªÉm tra ƒë·ªôt ph√°
                win_success, win_realm = await cultivation_cog.add_exp(winner.id, win_exp,
                                                                       f"th·∫Øng PvP v·ªõi {loser.display_name}")
                lose_success, lose_realm = await cultivation_cog.add_exp(loser.id, lose_exp,
                                                                         f"thua PvP v·ªõi {winner.display_name}")

                # Th√¥ng b√°o ƒë·ªôt ph√°
                breakthrough_text = ""
                if win_success:
                    breakthrough_text += f"\n{EMOJI_LEVEL_UP} {winner.mention} ƒë√£ ƒë·ªôt ph√° l√™n **{win_realm}**!"
                if lose_success:
                    breakthrough_text += f"\n{EMOJI_LEVEL_UP} {loser.mention} ƒë√£ ƒë·ªôt ph√° l√™n **{lose_realm}**!"
            else:
                win_exp = 50
                lose_exp = 20
                breakthrough_text = ""

                # Th√™m kinh nghi·ªám
                await add_user_exp(winner.id, win_exp)
                await add_user_exp(loser.id, lose_exp)

            # Th√™m th√¥ng tin ph·∫ßn th∆∞·ªüng v√†o embed
            embed.add_field(
                name="Ph·∫ßn th∆∞·ªüng",
                value=(
                    f"{winner.mention}:\n"
                    f"{EMOJI_LINH_THACH} **+{COMBAT_WIN_REWARD}** linh th·∫°ch\n"
                    f"{EMOJI_EXP} **+{win_exp}** kinh nghi·ªám\n\n"
                    f"{loser.mention}:\n"
                    f"{EMOJI_EXP} **+{lose_exp}** kinh nghi·ªám"
                    f"{breakthrough_text}"
                ),
                inline=False
            )

            # C·∫≠p nh·∫≠t tin nh·∫Øn cu·ªëi c√πng
            await challenge_msg.edit(embed=embed)

            # C·∫≠p nh·∫≠t th·ªùi gian combat cho ng∆∞·ªùi g·ªçi l·ªánh
            await update_user(ctx.author.id, {"last_combat": now.isoformat()})

        except asyncio.TimeoutError:
            # N·∫øu h·∫øt th·ªùi gian
            embed.description = f"{opponent.display_name} kh√¥ng ph·∫£n h·ªìi. Th√°ch ƒë·∫•u b·ªã h·ªßy!"
            embed.color = EMBED_COLOR_ERROR
            await challenge_msg.edit(embed=embed)


async def setup(bot):
    await bot.add_cog(CombatCog(bot))