import discord
from discord.ext import commands
import traceback
import sys
import logging
from typing import Dict, List, Optional

from config import EMBED_COLOR_ERROR

# C·∫•u h√¨nh logging
logger = logging.getLogger("tutien-bot.error_handler")


class ErrorHandlerCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        """X·ª≠ l√Ω l·ªói khi th·ª±c hi·ªán l·ªánh"""
        # N·∫øu l·ªánh c√≥ error handler ri√™ng, b·ªè qua
        if hasattr(ctx.command, 'on_error'):
            return

        # L·∫•y l·ªói g·ªëc n·∫øu ƒë∆∞·ª£c b·ªçc trong CommandInvokeError
        error = getattr(error, 'original', error)

        # B·ªè qua l·ªói CommandNotFound
        if isinstance(error, commands.CommandNotFound):
            return

        # X·ª≠ l√Ω t·ª´ng lo·∫°i l·ªói
        if isinstance(error, commands.DisabledCommand):
            # L·ªánh b·ªã v√¥ hi·ªáu h√≥a
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"L·ªánh `{ctx.command}` ƒë√£ b·ªã v√¥ hi·ªáu h√≥a.",
                color=EMBED_COLOR_ERROR
            )
            return await ctx.send(embed=embed)

        elif isinstance(error, commands.NoPrivateMessage):
            # L·ªánh kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong DM
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"L·ªánh `{ctx.command}` kh√¥ng th·ªÉ s·ª≠ d·ª•ng trong tin nh·∫Øn ri√™ng.",
                color=EMBED_COLOR_ERROR
            )
            return await ctx.send(embed=embed)

        elif isinstance(error, commands.BadArgument):
            # ƒê·ªëi s·ªë kh√¥ng h·ª£p l·ªá
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"ƒê·ªëi s·ªë kh√¥ng h·ª£p l·ªá cho l·ªánh `{ctx.command}`.",
                color=EMBED_COLOR_ERROR
            )
            return await ctx.send(embed=embed)

        elif isinstance(error, commands.MissingRequiredArgument):
            # Thi·∫øu ƒë·ªëi s·ªë b·∫Øt bu·ªôc
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"Thi·∫øu ƒë·ªëi s·ªë **{error.param.name}** cho l·ªánh `{ctx.command}`.",
                color=EMBED_COLOR_ERROR
            )
            return await ctx.send(embed=embed)

        elif isinstance(error, commands.CommandOnCooldown):
            # L·ªánh ƒëang trong th·ªùi gian h·ªìi
            minutes, seconds = divmod(int(error.retry_after), 60)

            if minutes > 0:
                time_format = f"**{minutes} ph√∫t {seconds} gi√¢y**"
            else:
                time_format = f"**{seconds} gi√¢y**"

            embed = discord.Embed(
                title="‚è≥ Cooldown",
                description=f"L·ªánh `{ctx.command}` ƒëang trong th·ªùi gian h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau {time_format}.",
                color=EMBED_COLOR_ERROR
            )
            return await ctx.send(embed=embed)

        elif isinstance(error, commands.CheckFailure):
            # Kh√¥ng ƒë·ªß quy·ªÅn ho·∫∑c kh√¥ng th·ªèa ƒëi·ªÅu ki·ªán
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh `{ctx.command}`.",
                color=EMBED_COLOR_ERROR
            )
            return await ctx.send(embed=embed)

        # L·ªói chung kh√°c
        # Log l·ªói
        logger.error(f"L·ªói khi th·ª±c hi·ªán l·ªánh {ctx.command}: {error}")
        logger.error(traceback.format_exception(type(error), error, error.__traceback__))

        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh `{ctx.command}`:\n```{str(error)}```",
            color=EMBED_COLOR_ERROR
        )

        # Th√™m h∆∞·ªõng d·∫´n
        embed.add_field(
            name="H∆∞·ªõng D·∫´n",
            value="Vui l√≤ng ki·ªÉm tra c√∫ ph√°p l·ªánh ho·∫∑c th·ª≠ l·∫°i sau. N·∫øu l·ªói v·∫´n ti·∫øp t·ª•c, h√£y b√°o c√°o cho qu·∫£n tr·ªã vi√™n.",
            inline=False
        )

        await ctx.send(embed=embed)

    @commands.command(name="ping")
    async def ping(self, ctx):
        """Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot"""
        # T√≠nh to√°n ƒë·ªô tr·ªÖ
        latency = round(self.bot.latency * 1000)

        # T·∫°o embed
        embed = discord.Embed(
            title="üèì Pong!",
            description=f"ƒê·ªô tr·ªÖ: **{latency}ms**",
            color=discord.Color.green() if latency < 100 else discord.Color.orange() if latency < 200 else discord.Color.red()
        )

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @commands.command(name="info", aliases=["botinfo", "thongtin"])
    async def bot_info(self, ctx):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ bot"""
        # T·∫°o embed
        embed = discord.Embed(
            title="ü§ñ Th√¥ng Tin Bot",
            color=discord.Color.blue()
        )

        # Th√™m th√¥ng tin bot
        embed.add_field(
            name="T√™n",
            value=self.bot.user.name,
            inline=True
        )

        embed.add_field(
            name="ID",
            value=self.bot.user.id,
            inline=True
        )

        # Th√™m th√¥ng tin h·ªá th·ªëng
        import platform
        import discord

        embed.add_field(
            name="Phi√™n B·∫£n Discord.py",
            value=discord.__version__,
            inline=True
        )

        embed.add_field(
            name="Python",
            value=platform.python_version(),
            inline=True
        )

        embed.add_field(
            name="H·ªá ƒêi·ªÅu H√†nh",
            value=platform.system(),
            inline=True
        )

        # Th√™m th√¥ng tin server
        guild_count = len(self.bot.guilds)

        embed.add_field(
            name="S·ªë Server",
            value=guild_count,
            inline=True
        )

        # T√≠nh t·ªïng s·ªë th√†nh vi√™n
        member_count = sum(guild.member_count for guild in self.bot.guilds)

        embed.add_field(
            name="S·ªë Th√†nh Vi√™n",
            value=member_count,
            inline=True
        )

        # Th√™m th√¥ng tin ping
        embed.add_field(
            name="Ping",
            value=f"{round(self.bot.latency * 1000)}ms",
            inline=True
        )

        # Th√™m th·ªùi gian ho·∫°t ƒë·ªông
        from datetime import datetime
        import psutil

        # L·∫•y th·ªùi gian ti·∫øn tr√¨nh Python ƒë√£ ch·∫°y
        process = psutil.Process()
        uptime = datetime.now() - datetime.fromtimestamp(process.create_time())

        # ƒê·ªãnh d·∫°ng th·ªùi gian ho·∫°t ƒë·ªông
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        uptime_str = f"{days} ng√†y, {hours} gi·ªù, {minutes} ph√∫t, {seconds} gi√¢y"

        embed.add_field(
            name="Th·ªùi Gian Ho·∫°t ƒê·ªông",
            value=uptime_str,
            inline=False
        )

        # Th√™m th√¥ng tin b·ªô nh·ªõ
        ram_usage = psutil.Process().memory_info().rss / 1024 ** 2  # ƒê·ªïi sang MB

        embed.add_field(
            name="S·ª≠ D·ª•ng RAM",
            value=f"{ram_usage:.2f} MB",
            inline=True
        )

        # Th√™m th√¥ng tin CPU
        cpu_usage = psutil.Process().cpu_percent() / psutil.cpu_count()

        embed.add_field(
            name="S·ª≠ D·ª•ng CPU",
            value=f"{cpu_usage:.2f}%",
            inline=True
        )

        # Th√™m avatar
        embed.set_thumbnail(url=self.bot.user.display_avatar.url)

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @commands.command(name="restart", aliases=["reboot"])
    @commands.is_owner()
    async def restart(self, ctx):
        """Kh·ªüi ƒë·ªông l·∫°i bot (ch·ªâ d√†nh cho ch·ªß bot)"""
        # T·∫°o embed
        embed = discord.Embed(
            title="üîÑ Kh·ªüi ƒê·ªông L·∫°i",
            description="Bot ƒëang ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...",
            color=discord.Color.orange()
        )

        # G·ª≠i embed
        await ctx.send(embed=embed)

        # Kh·ªüi ƒë·ªông l·∫°i bot
        import os
        import sys

        # Log th√¥ng tin
        logger.info("Bot ƒëang ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i...")

        # Kh·ªüi ƒë·ªông l·∫°i ti·∫øn tr√¨nh Python
        os.execv(sys.executable, ['python'] + sys.argv)

    @commands.command(name="servers", aliases=["guilds"])
    @commands.is_owner()
    async def list_servers(self, ctx):
        """Li·ªát k√™ c√°c server bot ƒëang tham gia (ch·ªâ d√†nh cho ch·ªß bot)"""
        # T·∫°o embed
        embed = discord.Embed(
            title="üåê Danh S√°ch Server",
            description=f"Bot ƒëang tham gia {len(self.bot.guilds)} server:",
            color=discord.Color.blue()
        )

        # Th√™m th√¥ng tin t·ª´ng server
        for guild in self.bot.guilds:
            embed.add_field(
                name=guild.name,
                value=(
                    f"ID: {guild.id}\n"
                    f"Ch·ªß s·ªü h·ªØu: {guild.owner}\n"
                    f"Th√†nh vi√™n: {guild.member_count}\n"
                    f"Ng√†y tham gia: {guild.me.joined_at.strftime('%d/%m/%Y')}"
                ),
                inline=False
            )

        # G·ª≠i embed
        await ctx.send(embed=embed)


async def setup(bot):
    try:
        # T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
        import os
        os.makedirs("logs", exist_ok=True)

        # Th√™m cog
        await bot.add_cog(ErrorHandlerCog(bot))
        logger.info("ƒê√£ t·∫£i ErrorHandlerCog")
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i ErrorHandlerCog: {e}")