import discord
from discord.ext import commands
import asyncio
import datetime
import random
import logging
import sys
import os
import psutil
from typing import List, Dict, Any, Optional, Union

from database.mongo_handler import get_user_or_create, users_collection
from config import (
    CULTIVATION_REALMS, EMBED_COLOR, EMBED_COLOR_SUCCESS,
    EMBED_COLOR_ERROR, EMOJI_LINH_THACH, EMOJI_EXP
)
from utils.text_utils import format_number, generate_random_quote, realm_description
from utils.time_utils import get_vietnamese_date_string, format_seconds
from utils.embed_utils import create_embed, create_success_embed, create_error_embed

# C·∫•u h√¨nh logging
logger = logging.getLogger("tutien-bot.utility")


class UtilityCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="profile", aliases=["p", "me", "thongtin"])
    async def profile(self, ctx, member: discord.Member = None):
        """Hi·ªÉn th·ªã th√¥ng tin nh√¢n v·∫≠t c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c"""
        # N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh member, l·∫•y ng∆∞·ªùi g·ªçi l·ªánh
        if member is None:
            member = ctx.author

        # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        user = await get_user_or_create(member.id, member.name)

        # L·∫•y th√¥ng tin c·∫£nh gi·ªõi
        realm_id = user.get("realm_id", 0)
        realm_info = CULTIVATION_REALMS[realm_id] if realm_id < len(CULTIVATION_REALMS) else {"name": "Kh√¥ng x√°c ƒë·ªãnh",
                                                                                              "exp_required": 0}
        realm_name = realm_info["name"]

        # T·∫°o embed
        embed = discord.Embed(
            title=f"Th√¥ng Tin Tu Luy·ªán - {member.display_name}",
            description=f"Tu vi hi·ªán t·∫°i: **{realm_name}**\n\n{realm_description(realm_id, realm_name)}",
            color=EMBED_COLOR
        )

        # Th√™m th√¥ng tin kinh nghi·ªám
        current_exp = user.get("experience", 0)

        # X√°c ƒë·ªãnh c·∫£nh gi·ªõi ti·∫øp theo
        next_realm = None
        exp_to_next = 0

        if realm_id < len(CULTIVATION_REALMS) - 1:
            next_realm = CULTIVATION_REALMS[realm_id + 1]
            exp_to_next = next_realm["exp_required"] - current_exp

        # Hi·ªÉn th·ªã th√¥ng tin kinh nghi·ªám v√† c·∫£nh gi·ªõi
        exp_text = f"{EMOJI_EXP} Kinh nghi·ªám: **{format_number(current_exp)}**"

        if next_realm:
            progress = (current_exp - realm_info["exp_required"]) / (
                        next_realm["exp_required"] - realm_info["exp_required"]) * 100
            exp_text += f"\n‚û°Ô∏è C·∫£nh gi·ªõi ti·∫øp theo: **{next_realm['name']}**"
            exp_text += f"\n‚è≥ Ti·∫øn ƒë·ªô: **{progress:.1f}%** ({format_number(exp_to_next)} exp c√≤n thi·∫øu)"
        else:
            exp_text += "\nüèÜ ƒê√£ ƒë·∫°t ƒë·∫øn c·∫£nh gi·ªõi t·ªëi cao!"

        embed.add_field(
            name="Linh L·ª±c",
            value=exp_text,
            inline=False
        )

        # Th√™m th√¥ng tin t√†i nguy√™n
        linh_thach = user.get("linh_thach", 0)
        embed.add_field(
            name="T√†i Nguy√™n",
            value=f"{EMOJI_LINH_THACH} Linh th·∫°ch: **{format_number(linh_thach)}**",
            inline=True
        )

        # Th√™m th√¥ng tin chi·∫øn ƒë·∫•u
        health = user.get("health", 100)
        attack = user.get("attack", 10)
        defense = user.get("defense", 5)

        embed.add_field(
            name="Th√¥ng S·ªë Chi·∫øn ƒê·∫•u",
            value=(
                f"‚ù§Ô∏è HP: **{health}**\n"
                f"‚öîÔ∏è T·∫•n c√¥ng: **{attack}**\n"
                f"üõ°Ô∏è Ph√≤ng th·ªß: **{defense}**"
            ),
            inline=True
        )

        # Th√™m th√¥ng tin m√¥n ph√°i
        sect_id = user.get("sect_id")
        if sect_id:
            # L·∫•y th√¥ng tin m√¥n ph√°i
            from database.mongo_handler import get_sect
            sect = await get_sect(sect_id)

            if sect:
                embed.add_field(
                    name="M√¥n Ph√°i",
                    value=f"üèØ **{sect['name']}**",
                    inline=True
                )

        # Th√™m th√¥ng tin ƒëi·ªÉm danh
        daily_streak = user.get("daily_streak", 0)
        if daily_streak > 0:
            embed.add_field(
                name="ƒêi·ªÉm Danh",
                value=f"üîÑ Chu·ªói ƒëi·ªÉm danh: **{daily_streak}** ng√†y",
                inline=True
            )

        # Th√™m avatar
        embed.set_thumbnail(url=member.display_avatar.url)

        # Th√™m footer
        embed.set_footer(text=f"ID: {member.id} ‚Ä¢ {get_vietnamese_date_string()}")

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @commands.command(name="roll", aliases=["r", "dice", "xucxac"])
    async def roll_dice(self, ctx, dice_str: str = "1d6"):
        """Tung x√∫c x·∫Øc theo ƒë·ªãnh d·∫°ng NdM (N vi√™n x√∫c x·∫Øc M m·∫∑t)"""
        try:
            # Ph√¢n t√≠ch c√∫ ph√°p
            if "d" not in dice_str:
                # N·∫øu ch·ªâ l√† m·ªôt s·ªë, n√©m m·ªôt vi√™n x√∫c x·∫Øc v·ªõi s·ªë m·∫∑t ƒë√≥
                num_dice = 1
                num_sides = int(dice_str)
            else:
                # Ph√¢n t√≠ch NdM
                num_dice, num_sides = map(int, dice_str.lower().split("d"))

            # Ki·ªÉm tra gi·ªõi h·∫°n
            if num_dice < 1 or num_dice > 100:
                return await ctx.send("S·ªë l∆∞·ª£ng x√∫c x·∫Øc ph·∫£i t·ª´ 1 ƒë·∫øn 100!")

            if num_sides < 1 or num_sides > 1000:
                return await ctx.send("S·ªë m·∫∑t x√∫c x·∫Øc ph·∫£i t·ª´ 1 ƒë·∫øn 1000!")

            # Tung x√∫c x·∫Øc
            results = [random.randint(1, num_sides) for _ in range(num_dice)]
            total = sum(results)

            # T·∫°o embed
            embed = discord.Embed(
                title=f"üé≤ K·∫øt Qu·∫£ Tung X√∫c X·∫Øc: {dice_str}",
                color=EMBED_COLOR
            )

            # Th√™m th√¥ng tin k·∫øt qu·∫£
            if num_dice > 1:
                embed.add_field(
                    name="Chi Ti·∫øt",
                    value=", ".join(str(r) for r in results),
                    inline=False
                )

            embed.add_field(
                name="T·ªïng",
                value=str(total),
                inline=False
            )

            # Th√™m ng∆∞·ªùi tung
            embed.set_footer(text=f"ƒê∆∞·ª£c tung b·ªüi {ctx.author.display_name}")

            # G·ª≠i embed
            await ctx.send(embed=embed)

        except ValueError:
            # N·∫øu c√∫ ph√°p kh√¥ng h·ª£p l·ªá
            embed = create_error_embed(
                title="‚ùå L·ªói C√∫ Ph√°p",
                description="C√∫ ph√°p h·ª£p l·ªá: `!roll NdM` ho·∫∑c `!roll M`\nV√≠ d·ª•: `!roll 2d6` ƒë·ªÉ tung 2 vi√™n x√∫c x·∫Øc 6 m·∫∑t, ho·∫∑c `!roll 20` ƒë·ªÉ tung 1 vi√™n x√∫c x·∫Øc 20 m·∫∑t."
            )
            await ctx.send(embed=embed)

    @commands.command(name="choose", aliases=["c", "chon", "pick"])
    async def choose(self, ctx, *, choices: str):
        """Ch·ªçn ng·∫´u nhi√™n m·ªôt l·ª±a ch·ªçn t·ª´ danh s√°ch"""
        # T√°ch c√°c l·ª±a ch·ªçn
        options = [option.strip() for option in choices.split(",")]

        # Lo·∫°i b·ªè c√°c t√πy ch·ªçn tr·ªëng
        options = [option for option in options if option]

        # Ki·ªÉm tra c√≥ ƒë·ªß l·ª±a ch·ªçn kh√¥ng
        if len(options) < 2:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Vui l√≤ng cung c·∫•p √≠t nh·∫•t 2 l·ª±a ch·ªçn, ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y.",
            )
            return await ctx.send(embed=embed)

        # Ch·ªçn ng·∫´u nhi√™n
        chosen = random.choice(options)

        # T·∫°o embed
        embed = create_embed(
            title="üéØ L·ª±a Ch·ªçn Ng·∫´u Nhi√™n",
            description=f"T√¥i ch·ªçn: **{chosen}**",
        )

        # Th√™m danh s√°ch c√°c l·ª±a ch·ªçn
        embed.add_field(
            name="C√°c L·ª±a Ch·ªçn",
            value="\n".join(f"‚Ä¢ {option}" for option in options),
            inline=False
        )

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @commands.command(name="poll", aliases=["binhchon", "vote"])
    async def create_poll(self, ctx, question: str, *options):
        """T·∫°o m·ªôt cu·ªôc b√¨nh ch·ªçn"""
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng l·ª±a ch·ªçn
        if len(options) < 2:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Vui l√≤ng cung c·∫•p √≠t nh·∫•t 2 l·ª±a ch·ªçn cho cu·ªôc b√¨nh ch·ªçn.\nV√≠ d·ª•: `!poll \"M√¥n ph√°i n√†o m·∫°nh nh·∫•t?\" \"Thi√™n Ki·∫øm T√¥ng\" \"ƒêo·∫°n T√¨nh C·ªëc\" \"Huy·∫øt Ma Gi√°o\"`",
            )
            return await ctx.send(embed=embed)

        if len(options) > 10:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Cu·ªôc b√¨nh ch·ªçn ch·ªâ h·ªó tr·ª£ t·ªëi ƒëa 10 l·ª±a ch·ªçn.",
            )
            return await ctx.send(embed=embed)

        # C√°c emoji s·ªë t·ª´ 1 ƒë·∫øn 10
        emoji_numbers = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]

        # T·∫°o embed
        embed = create_embed(
            title=f"üìä B√¨nh Ch·ªçn: {question}",
            description="B·∫•m v√†o c√°c emoji b√™n d∆∞·ªõi ƒë·ªÉ b√¨nh ch·ªçn!",
        )

        # Th√™m c√°c l·ª±a ch·ªçn
        for i, option in enumerate(options):
            embed.add_field(
                name=f"L·ª±a ch·ªçn {i + 1}",
                value=f"{emoji_numbers[i]} {option}",
                inline=False
            )

        # Th√™m ng∆∞·ªùi t·∫°o
        embed.set_footer(text=f"ƒê∆∞·ª£c t·∫°o b·ªüi {ctx.author.display_name}")

        # G·ª≠i embed
        message = await ctx.send(embed=embed)

        # Th√™m c√°c emoji ƒë·ªÉ b√¨nh ch·ªçn
        for i in range(len(options)):
            await message.add_reaction(emoji_numbers[i])

    @commands.command(name="weather", aliases=["thoitiet", "tt"])
    async def weather(self, ctx, *, location: str = "Ph√†m Tr·∫ßn"):
        """Hi·ªÉn th·ªã th·ªùi ti·∫øt t·∫°i m·ªôt ƒë·ªãa ƒëi·ªÉm trong th·∫ø gi·ªõi tu ti√™n"""
        # Danh s√°ch c√°c ƒë·ªãa ƒëi·ªÉm t∆∞·ªüng t∆∞·ª£ng
        locations = {
            "pham tran": {
                "name": "Ph√†m Tr·∫ßn",
                "description": "N∆°i sinh s·ªëng c·ªßa ph√†m nh√¢n, th·∫ø gi·ªõi ph·ªìn hoa ƒë√¥ h·ªôi.",
                "weather": ["n·∫Øng nh·∫π", "m∆∞a r√†o", "m√¢y che ph·ªß", "s∆∞∆°ng m√π", "n·∫Øng g·∫Øt"]
            },
            "thien kiem phong": {
                "name": "Thi√™n Ki·∫øm Phong",
                "description": "ƒê·ªânh n√∫i n∆°i t·ªça l·∫°c c·ªßa Thi√™n Ki·∫øm T√¥ng, cao v√∫t tr√™n m√¢y.",
                "weather": ["m√¢y l√†nh", "s∆∞∆°ng m√π nh·∫π", "n·∫Øng cao nguy√™n", "gi√≥ nh·∫π", "m∆∞a tinh khi·∫øt"]
            },
            "doan tinh coc": {
                "name": "ƒêo·∫°n T√¨nh C·ªëc",
                "description": "Thung l≈©ng u √°m, n∆°i ·∫©n tu c·ªßa c√°c n·ªØ tu kh√¥ng m√†ng t√¨nh c·∫£m.",
                "weather": ["s∆∞∆°ng ƒë·ªôc", "gi√≥ l·∫°nh", "m√¢y h·ªìng", "trƒÉng s√°ng", "hoa r∆°i"]
            },
            "huyet ma cung": {
                "name": "Huy·∫øt Ma Cung",
                "description": "Cung ƒëi·ªán ƒë·ªè t∆∞∆°i c·ªßa Huy·∫øt Ma Gi√°o, nhu·ªëm ƒë·∫ßy m√°u t∆∞∆°i v√† s√°t kh√≠.",
                "weather": ["m∆∞a m√°u", "s∆∞∆°ng ƒë·ªè", "m√¢y ƒëen", "s·∫•m ch·ªõp", "t·ªëi tƒÉm"]
            },
            "tuyet nguyet phong": {
                "name": "Tuy·∫øt Nguy·ªát Phong",
                "description": "ƒê·ªânh n√∫i tuy·∫øt tr·∫Øng, n∆°i √°nh trƒÉng lu√¥n r·ªçi s√°ng d√π ng√†y hay ƒë√™m.",
                "weather": ["tuy·∫øt r∆°i", "trƒÉng s√°ng", "bƒÉng gi√°", "gi√≥ l·∫°nh", "s∆∞∆°ng tr·∫Øng"]
            },
            "phieu dieu cac": {
                "name": "Phi√™u Di√™u C√°c",
                "description": "N∆°i t·ª• h·ªçp c·ªßa H·ªìng Tr·∫ßn L·ªØ Kh√°ch, t·ªça l·∫°c tr√™n ƒë·ªânh n√∫i m√¢y m√π.",
                "weather": ["gi√≥ nh·∫π", "m√¢y tr√¥i", "n·∫Øng ·∫•m", "s∆∞∆°ng s·ªõm", "trƒÉng thanh"]
            }
        }

        # Chu·∫©n h√≥a ƒë·ªãa ƒëi·ªÉm
        location_key = location.lower().replace(" ", "")

        # T√¨m ƒë·ªãa ƒëi·ªÉm ph√π h·ª£p nh·∫•t
        matched_location = None
        for key, loc_data in locations.items():
            if key.replace(" ", "") in location_key or location_key in key.replace(" ", ""):
                matched_location = loc_data
                break

        # N·∫øu kh√¥ng t√¨m th·∫•y, s·ª≠ d·ª•ng Ph√†m Tr·∫ßn
        if not matched_location:
            matched_location = locations["pham tran"]

        # Ch·ªçn ng·∫´u nhi√™n th·ªùi ti·∫øt
        weather = random.choice(matched_location["weather"])

        # Ch·ªçn ng·∫´u nhi√™n nhi·ªát ƒë·ªô d·ª±a tr√™n th·ªùi ti·∫øt
        if "tuy·∫øt" in weather or "bƒÉng" in weather:
            temp = random.randint(-10, 5)
        elif "l·∫°nh" in weather:
            temp = random.randint(5, 15)
        elif "n·∫Øng g·∫Øt" in weather:
            temp = random.randint(30, 40)
        elif "n·∫Øng" in weather:
            temp = random.randint(25, 30)
        else:
            temp = random.randint(15, 25)

        # Ch·ªçn ng·∫´u nhi√™n ƒë·ªô ·∫©m
        humidity = random.randint(30, 90)

        # Ch·ªçn ng·∫´u nhi√™n t·ªëc ƒë·ªô gi√≥
        wind_speed = random.randint(0, 30)

        # T·∫°o embed
        embed = create_embed(
            title=f"üå§Ô∏è Th·ªùi Ti·∫øt: {matched_location['name']}",
            description=matched_location["description"],
        )

        # Th√™m th√¥ng tin th·ªùi ti·∫øt
        embed.add_field(
            name="Th·ªùi Ti·∫øt",
            value=weather.capitalize(),
            inline=True
        )

        embed.add_field(
            name="Nhi·ªát ƒê·ªô",
            value=f"{temp}¬∞C",
            inline=True
        )

        embed.add_field(
            name="ƒê·ªô ·∫®m",
            value=f"{humidity}%",
            inline=True
        )

        embed.add_field(
            name="Gi√≥",
            value=f"{wind_speed} km/h",
            inline=True
        )

        # Th√™m th√¥ng tin linh kh√≠
        linh_khi_level = random.randint(1, 10)
        linh_khi_desc = {
            1: "C·ª±c k·ª≥ th·∫•p, kh√≥ tu luy·ªán",
            2: "R·∫•t th·∫•p, ti·∫øn ƒë·ªô tu luy·ªán ch·∫≠m",
            3: "Th·∫•p, kh√¥ng th√≠ch h·ª£p tu luy·ªán",
            4: "H∆°i th·∫•p, tu luy·ªán kh√¥ng hi·ªáu qu·∫£",
            5: "Trung b√¨nh, tu luy·ªán b√¨nh th∆∞·ªùng",
            6: "Kh√° t·ªët, th√≠ch h·ª£p tu luy·ªán",
            7: "Cao, r·∫•t th√≠ch h·ª£p tu luy·ªán",
            8: "R·∫•t cao, tu luy·ªán ti·∫øn tri·ªÉn nhanh",
            9: "C·ª±c cao, tuy·ªát v·ªùi cho tu luy·ªán",
            10: "ƒê·ªânh cao, ƒë·ªôt ph√° d·ªÖ d√†ng"
        }

        embed.add_field(
            name="N·ªìng ƒê·ªô Linh Kh√≠",
            value=f"C·∫•p ƒë·ªô {linh_khi_level}/10 - {linh_khi_desc[linh_khi_level]}",
            inline=False
        )

        # Th√™m th·ªùi gian d·ª± b√°o
        embed.set_footer(text=f"D·ª± b√°o v√†o: {get_vietnamese_date_string()}")

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @commands.command(name="quote", aliases=["q", "daochan", "caungon"])
    async def random_quote(self, ctx):
        """Hi·ªÉn th·ªã m·ªôt c√¢u n√≥i ng·∫´u nhi√™n v·ªÅ tu ti√™n"""
        # L·∫•y c√¢u n√≥i ng·∫´u nhi√™n
        quote = generate_random_quote()

        # T·∫°o embed
        embed = create_embed(
            title="üìú ƒê·∫°o Ch√¢m Tu Ti√™n",
            description=f"*\"{quote}\"*",
        )

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @commands.command(name="timeleft", aliases=["cooldown", "cd", "thoigian"])
    async def check_cooldowns(self, ctx):
        """Ki·ªÉm tra th·ªùi gian h·ªìi c·ªßa c√°c ho·∫°t ƒë·ªông"""
        # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        user = await get_user_or_create(ctx.author.id, ctx.author.name)

        # L·∫•y th·ªùi gian hi·ªán t·∫°i
        now = datetime.datetime.now()

        # T·∫°o embed
        embed = create_embed(
            title=f"‚è≥ Th·ªùi Gian H·ªìi - {ctx.author.display_name}",
            description="Th·ªùi gian c√≤n l·∫°i cho c√°c ho·∫°t ƒë·ªông:",
        )

        # Ki·ªÉm tra th·ªùi gian ƒëi·ªÉm danh
        last_daily = user.get("last_daily")
        if last_daily:
            last_daily = datetime.datetime.fromisoformat(last_daily)
            # Ki·ªÉm tra xem ƒë√£ qua ng√†y m·ªõi ch∆∞a
            next_day = datetime.datetime.combine(last_daily.date() + datetime.timedelta(days=1), datetime.time.min)
            if now < next_day:
                time_diff = (next_day - now).total_seconds()
                embed.add_field(
                    name="ƒêi·ªÉm Danh",
                    value=format_seconds(time_diff),
                    inline=True
                )
            else:
                embed.add_field(
                    name="ƒêi·ªÉm Danh",
                    value="‚úÖ S·∫µn s√†ng",
                    inline=True
                )
        else:
            embed.add_field(
                name="ƒêi·ªÉm Danh",
                value="‚úÖ S·∫µn s√†ng",
                inline=True
            )

        # Ki·ªÉm tra th·ªùi gian ƒë√°nh qu√°i
        last_danhquai = user.get("last_danhquai")
        if last_danhquai:
            last_danhquai = datetime.datetime.fromisoformat(last_danhquai)
            time_diff = (now - last_danhquai).total_seconds()
            cooldown = 600  # 10 ph√∫t

            if time_diff < cooldown:
                remaining = cooldown - time_diff
                embed.add_field(
                    name="ƒê√°nh Qu√°i",
                    value=format_seconds(remaining),
                    inline=True
                )
            else:
                embed.add_field(
                    name="ƒê√°nh Qu√°i",
                    value="‚úÖ S·∫µn s√†ng",
                    inline=True
                )
        else:
            embed.add_field(
                name="ƒê√°nh Qu√°i",
                value="‚úÖ S·∫µn s√†ng",
                inline=True
            )

        # Ki·ªÉm tra th·ªùi gian ƒë√°nh boss
        last_danhboss = user.get("last_danhboss")
        if last_danhboss:
            last_danhboss = datetime.datetime.fromisoformat(last_danhboss)
            time_diff = (now - last_danhboss).total_seconds()
            cooldown = 900  # 15 ph√∫t

            if time_diff < cooldown:
                remaining = cooldown - time_diff
                embed.add_field(
                    name="ƒê√°nh Boss",
                    value=format_seconds(remaining),
                    inline=True
                )
            else:
                embed.add_field(
                    name="ƒê√°nh Boss",
                    value="‚úÖ S·∫µn s√†ng",
                    inline=True
                )
        else:
            embed.add_field(
                name="ƒê√°nh Boss",
                value="‚úÖ S·∫µn s√†ng",
                inline=True
            )

        # Ki·ªÉm tra th·ªùi gian PvP
        last_combat = user.get("last_combat")
        if last_combat:
            last_combat = datetime.datetime.fromisoformat(last_combat)
            time_diff = (now - last_combat).total_seconds()
            cooldown = 1800  # 30 ph√∫t

            if time_diff < cooldown:
                remaining = cooldown - time_diff
                embed.add_field(
                    name="PvP",
                    value=format_seconds(remaining),
                    inline=True
                )
            else:
                embed.add_field(
                    name="PvP",
                    value="‚úÖ S·∫µn s√†ng",
                    inline=True
                )
        else:
            embed.add_field(
                name="PvP",
                value="‚úÖ S·∫µn s√†ng",
                inline=True
            )

        # G·ª≠i embed
        await ctx.send(embed=embed)


async def setup(bot):
    await bot.add_cog(UtilityCog(bot))