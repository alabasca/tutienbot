import discord
from discord.ext import commands
import asyncio
import datetime
import logging
import re
from typing import Optional, Union

from utils.embed_utils import create_embed, create_success_embed, create_error_embed

# C·∫•u h√¨nh logging
logger = logging.getLogger("tutien-bot.moderation")


class ModerationCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.warning_db = {}  # {guild_id: {user_id: [warning1, warning2, ...]}}

    async def cog_check(self, ctx):
        """Ki·ªÉm tra quy·ªÅn qu·∫£n l√Ω"""
        return (
                ctx.author.guild_permissions.manage_messages or
                ctx.author.guild_permissions.kick_members or
                ctx.author.guild_permissions.ban_members or
                await self.bot.is_owner(ctx.author)
        )

    @commands.command(name="clear", aliases=["purge", "xoa"])
    @commands.has_permissions(manage_messages=True)
    async def clear_messages(self, ctx, amount: int = 5):
        """X√≥a m·ªôt s·ªë l∆∞·ª£ng tin nh·∫Øn nh·∫•t ƒë·ªãnh"""
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng h·ª£p l·ªá
        if amount <= 0:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn x√≥a ph·∫£i l·ªõn h∆°n 0."
            )
            return await ctx.send(embed=embed)

        if amount > 100:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Kh√¥ng th·ªÉ x√≥a qu√° 100 tin nh·∫Øn c√πng l√∫c do gi·ªõi h·∫°n c·ªßa Discord."
            )
            return await ctx.send(embed=embed)

        # X√≥a tin nh·∫Øn l·ªánh g·ªçi ƒë·∫ßu ti√™n
        await ctx.message.delete()

        # X√≥a tin nh·∫Øn
        deleted = await ctx.channel.purge(limit=amount)

        # G·ª≠i th√¥ng b√°o
        embed = create_success_embed(
            title="üßπ ƒê√£ X√≥a Tin Nh·∫Øn",
            description=f"ƒê√£ x√≥a **{len(deleted)}** tin nh·∫Øn t·ª´ k√™nh {ctx.channel.mention}."
        )

        message = await ctx.send(embed=embed)

        # T·ª± ƒë·ªông x√≥a th√¥ng b√°o sau 5 gi√¢y
        await asyncio.sleep(5)
        await message.delete()

        # Log h√†nh ƒë·ªông
        logger.info(f"Mod {ctx.author.name} ƒë√£ x√≥a {len(deleted)} tin nh·∫Øn trong k√™nh {ctx.channel.name}")

    @commands.command(name="kick", aliases=["duoi"])
    @commands.has_permissions(kick_members=True)
    async def kick_member(self, ctx, member: discord.Member, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
        """ƒêu·ªïi m·ªôt th√†nh vi√™n kh·ªèi server"""
        # Ki·ªÉm tra quy·ªÅn h·∫°n
        if member.top_role >= ctx.author.top_role and ctx.author.id != ctx.guild.owner_id:
            embed = create_error_embed(
                title="‚ùå L·ªói Quy·ªÅn H·∫°n",
                description="B·∫°n kh√¥ng th·ªÉ ƒëu·ªïi th√†nh vi√™n c√≥ vai tr√≤ cao h∆°n ho·∫∑c ngang v·ªõi b·∫°n."
            )
            return await ctx.send(embed=embed)

        if member.top_role >= ctx.guild.me.top_role:
            embed = create_error_embed(
                title="‚ùå L·ªói Quy·ªÅn H·∫°n",
                description="Bot kh√¥ng th·ªÉ ƒëu·ªïi th√†nh vi√™n c√≥ vai tr√≤ cao h∆°n ho·∫∑c ngang v·ªõi bot."
            )
            return await ctx.send(embed=embed)

        # T·∫°o embed x√°c nh·∫≠n
        embed = create_embed(
            title="‚ö†Ô∏è X√°c Nh·∫≠n ƒêu·ªïi Th√†nh Vi√™n",
            description=f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëu·ªïi {member.mention} kh·ªèi server kh√¥ng?\n\n**L√Ω do:** {reason}",
            color=discord.Color.orange()
        )

        # G·ª≠i embed x√°c nh·∫≠n
        confirm_msg = await ctx.send(embed=embed)

        # Th√™m c√°c emoji x√°c nh·∫≠n
        await confirm_msg.add_reaction("‚úÖ")
        await confirm_msg.add_reaction("‚ùå")

        # H√†m ki·ªÉm tra reaction
        def check(reaction, user):
            return user.id == ctx.author.id and str(reaction.emoji) in ["‚úÖ",
                                                                        "‚ùå"] and reaction.message.id == confirm_msg.id

        try:
            # Ch·ªù ph·∫£n ·ª©ng
            reaction, user = await self.bot.wait_for("reaction_add", timeout=30.0, check=check)

            # N·∫øu t·ª´ ch·ªëi
            if str(reaction.emoji) == "‚ùå":
                cancel_embed = create_embed(
                    title="‚ùå ƒê√£ H·ªßy",
                    description="H√†nh ƒë·ªông ƒëu·ªïi th√†nh vi√™n ƒë√£ b·ªã h·ªßy.",
                    color=discord.Color.red()
                )
                await confirm_msg.edit(embed=cancel_embed)
                return

            # C·ªë g·∫Øng g·ª≠i DM cho th√†nh vi√™n b·ªã ƒëu·ªïi
            try:
                dm_embed = create_embed(
                    title="‚ö†Ô∏è B·∫°n ƒê√£ B·ªã ƒêu·ªïi",
                    description=f"B·∫°n ƒë√£ b·ªã ƒëu·ªïi kh·ªèi server **{ctx.guild.name}**.\n\n**L√Ω do:** {reason}",
                    color=discord.Color.red()
                )
                await member.send(embed=dm_embed)
            except:
                pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM

            # ƒêu·ªïi th√†nh vi√™n
            await member.kick(reason=f"B·ªüi {ctx.author.name}: {reason}")

            # T·∫°o embed th√¥ng b√°o
            success_embed = create_success_embed(
                title="‚úÖ ƒê√£ ƒêu·ªïi Th√†nh Vi√™n",
                description=f"{member.mention} ({member.name}) ƒë√£ b·ªã ƒëu·ªïi kh·ªèi server.\n\n**L√Ω do:** {reason}"
            )

            # C·∫≠p nh·∫≠t tin nh·∫Øn
            await confirm_msg.edit(embed=success_embed)

            # Log h√†nh ƒë·ªông
            logger.info(f"Mod {ctx.author.name} ƒë√£ ƒëu·ªïi {member.name} v√¨ l√Ω do: {reason}")

        except asyncio.TimeoutError:
            # N·∫øu h·∫øt th·ªùi gian
            timeout_embed = create_embed(
                title="‚è∞ H·∫øt Th·ªùi Gian",
                description="ƒê√£ h·∫øt th·ªùi gian x√°c nh·∫≠n. H√†nh ƒë·ªông b·ªã h·ªßy.",
                color=discord.Color.red()
            )
            await confirm_msg.edit(embed=timeout_embed)

    @commands.command(name="ban", aliases=["cam"])
    @commands.has_permissions(ban_members=True)
    async def ban_member(self, ctx, member: discord.Member, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
        """C·∫•m m·ªôt th√†nh vi√™n kh·ªèi server"""
        # Ki·ªÉm tra quy·ªÅn h·∫°n
        if member.top_role >= ctx.author.top_role and ctx.author.id != ctx.guild.owner_id:
            embed = create_error_embed(
                title="‚ùå L·ªói Quy·ªÅn H·∫°n",
                description="B·∫°n kh√¥ng th·ªÉ c·∫•m th√†nh vi√™n c√≥ vai tr√≤ cao h∆°n ho·∫∑c ngang v·ªõi b·∫°n."
            )
            return await ctx.send(embed=embed)

        if member.top_role >= ctx.guild.me.top_role:
            embed = create_error_embed(
                title="‚ùå L·ªói Quy·ªÅn H·∫°n",
                description="Bot kh√¥ng th·ªÉ c·∫•m th√†nh vi√™n c√≥ vai tr√≤ cao h∆°n ho·∫∑c ngang v·ªõi bot."
            )
            return await ctx.send(embed=embed)

        # T·∫°o embed x√°c nh·∫≠n
        embed = create_embed(
            title="‚ö†Ô∏è X√°c Nh·∫≠n C·∫•m Th√†nh Vi√™n",
            description=f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫•m {member.mention} kh·ªèi server kh√¥ng?\n\n**L√Ω do:** {reason}",
            color=discord.Color.orange()
        )

        # G·ª≠i embed x√°c nh·∫≠n
        confirm_msg = await ctx.send(embed=embed)

        # Th√™m c√°c emoji x√°c nh·∫≠n
        await confirm_msg.add_reaction("‚úÖ")
        await confirm_msg.add_reaction("‚ùå")

        # H√†m ki·ªÉm tra reaction
        def check(reaction, user):
            return user.id == ctx.author.id and str(reaction.emoji) in ["‚úÖ",
                                                                        "‚ùå"] and reaction.message.id == confirm_msg.id

        try:
            # Ch·ªù ph·∫£n ·ª©ng
            reaction, user = await self.bot.wait_for("reaction_add", timeout=30.0, check=check)

            # N·∫øu t·ª´ ch·ªëi
            if str(reaction.emoji) == "‚ùå":
                cancel_embed = create_embed(
                    title="‚ùå ƒê√£ H·ªßy",
                    description="H√†nh ƒë·ªông c·∫•m th√†nh vi√™n ƒë√£ b·ªã h·ªßy.",
                    color=discord.Color.red()
                )
                await confirm_msg.edit(embed=cancel_embed)
                return

            # C·ªë g·∫Øng g·ª≠i DM cho th√†nh vi√™n b·ªã c·∫•m
            try:
                dm_embed = create_embed(
                    title="‚ö†Ô∏è B·∫°n ƒê√£ B·ªã C·∫•m",
                    description=f"B·∫°n ƒë√£ b·ªã c·∫•m kh·ªèi server **{ctx.guild.name}**.\n\n**L√Ω do:** {reason}",
                    color=discord.Color.red()
                )
                await member.send(embed=dm_embed)
            except:
                pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM

            # C·∫•m th√†nh vi√™n
            await member.ban(reason=f"B·ªüi {ctx.author.name}: {reason}")

            # T·∫°o embed th√¥ng b√°o
            success_embed = create_success_embed(
                title="‚úÖ ƒê√£ C·∫•m Th√†nh Vi√™n",
                description=f"{member.mention} ({member.name}) ƒë√£ b·ªã c·∫•m kh·ªèi server.\n\n**L√Ω do:** {reason}"
            )

            # C·∫≠p nh·∫≠t tin nh·∫Øn
            await confirm_msg.edit(embed=success_embed)

            # Log h√†nh ƒë·ªông
            logger.info(f"Mod {ctx.author.name} ƒë√£ c·∫•m {member.name} v√¨ l√Ω do: {reason}")

        except asyncio.TimeoutError:
            # N·∫øu h·∫øt th·ªùi gian
            timeout_embed = create_embed(
                title="‚è∞ H·∫øt Th·ªùi Gian",
                description="ƒê√£ h·∫øt th·ªùi gian x√°c nh·∫≠n. H√†nh ƒë·ªông b·ªã h·ªßy.",
                color=discord.Color.red()
            )
            await confirm_msg.edit(embed=timeout_embed)

    @commands.command(name="unban", aliases=["uncam", "huycam"])
    @commands.has_permissions(ban_members=True)
    async def unban_member(self, ctx, *, user: str):
        """H·ªßy c·∫•m m·ªôt th√†nh vi√™n"""
        # L·∫•y danh s√°ch th√†nh vi√™n b·ªã c·∫•m
        banned_users = [entry async for entry in ctx.guild.bans()]

        # T√¨m ng∆∞·ªùi d√πng
        banned_user = None
        for ban_entry in banned_users:
            # Ki·ªÉm tra t√™n ho·∫∑c ID
            if user.isdigit():
                # N·∫øu l√† ID
                if str(ban_entry.user.id) == user:
                    banned_user = ban_entry.user
                    break
            else:
                # N·∫øu l√† t√™n
                if user.lower() in ban_entry.user.name.lower() or (hasattr(ban_entry.user, 'nick') and
                                                                   ban_entry.user.nick and
                                                                   user.lower() in ban_entry.user.nick.lower()):
                    banned_user = ban_entry.user
                    break

        # N·∫øu kh√¥ng t√¨m th·∫•y
        if not banned_user:
            embed = create_error_embed(
                title="‚ùå Kh√¥ng T√¨m Th·∫•y",
                description="Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng b·ªã c·∫•m ph√π h·ª£p v·ªõi t√™n ho·∫∑c ID ƒë√£ cung c·∫•p."
            )
            return await ctx.send(embed=embed)

        # H·ªßy c·∫•m ng∆∞·ªùi d√πng
        await ctx.guild.unban(banned_user, reason=f"B·ªüi {ctx.author.name}")

        # T·∫°o embed th√¥ng b√°o
        embed = create_success_embed(
            title="‚úÖ ƒê√£ H·ªßy C·∫•m",
            description=f"ƒê√£ h·ªßy c·∫•m {banned_user.mention} ({banned_user.name})."
        )

        # G·ª≠i embed
        await ctx.send(embed=embed)

        # Log h√†nh ƒë·ªông
        logger.info(f"Mod {ctx.author.name} ƒë√£ h·ªßy c·∫•m {banned_user.name}")

    @commands.command(name="warn", aliases=["warning", "canh_cao"])
    @commands.has_permissions(manage_messages=True)
    async def warn_member(self, ctx, member: discord.Member, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
        """C·∫£nh c√°o m·ªôt th√†nh vi√™n"""
        # Ki·ªÉm tra quy·ªÅn h·∫°n
        if member.top_role >= ctx.author.top_role and ctx.author.id != ctx.guild.owner_id:
            embed = create_error_embed(
                title="‚ùå L·ªói Quy·ªÅn H·∫°n",
                description="B·∫°n kh√¥ng th·ªÉ c·∫£nh c√°o th√†nh vi√™n c√≥ vai tr√≤ cao h∆°n ho·∫∑c ngang v·ªõi b·∫°n."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra n·∫øu th√†nh vi√™n l√† bot
        if member.bot:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Kh√¥ng th·ªÉ c·∫£nh c√°o bot."
            )
            return await ctx.send(embed=embed)

        # T·∫°o warning
        guild_id = ctx.guild.id
        member_id = member.id

        # Kh·ªüi t·∫°o dictionary n·∫øu c·∫ßn
        if guild_id not in self.warning_db:
            self.warning_db[guild_id] = {}

        if member_id not in self.warning_db[guild_id]:
            self.warning_db[guild_id][member_id] = []

        # Th√™m warning m·ªõi
        warning = {
            "reason": reason,
            "moderator_id": ctx.author.id,
            "timestamp": datetime.datetime.now().isoformat()
        }

        self.warning_db[guild_id][member_id].append(warning)

        # ƒê·∫øm s·ªë l∆∞·ª£ng c·∫£nh c√°o
        warning_count = len(self.warning_db[guild_id][member_id])

        # C·ªë g·∫Øng g·ª≠i DM cho th√†nh vi√™n
        try:
            dm_embed = create_embed(
                title="‚ö†Ô∏è C·∫£nh B√°o",
                description=f"B·∫°n ƒë√£ b·ªã c·∫£nh c√°o trong server **{ctx.guild.name}**.\n\n**L√Ω do:** {reason}\n**S·ªë c·∫£nh c√°o hi·ªán t·∫°i:** {warning_count}",
                color=discord.Color.orange()
            )
            await member.send(embed=dm_embed)
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM

        # T·∫°o embed th√¥ng b√°o
        embed = create_success_embed(
            title="‚ö†Ô∏è ƒê√£ C·∫£nh C√°o Th√†nh Vi√™n",
            description=f"{member.mention} ƒë√£ b·ªã c·∫£nh c√°o.\n\n**L√Ω do:** {reason}\n**S·ªë c·∫£nh c√°o hi·ªán t·∫°i:** {warning_count}"
        )

        # G·ª≠i embed
        await ctx.send(embed=embed)

        # Log h√†nh ƒë·ªông
        logger.info(f"Mod {ctx.author.name} ƒë√£ c·∫£nh c√°o {member.name} v√¨ l√Ω do: {reason}")

        # Th·ª±c hi·ªán h√†nh ƒë·ªông t·ª± ƒë·ªông d·ª±a tr√™n s·ªë l∆∞·ª£ng c·∫£nh c√°o
        if warning_count == 3:
            # G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi ƒëi·ªÅu h√†nh
            mod_embed = create_embed(
                title="‚ö†Ô∏è C·∫£nh B√°o T·ª± ƒê·ªông",
                description=f"{member.mention} ƒë√£ nh·∫≠n ƒë∆∞·ª£c 3 c·∫£nh c√°o. C√¢n nh·∫Øc ƒëu·ªïi ho·∫∑c c·∫•m th√†nh vi√™n n√†y.",
                color=discord.Color.orange()
            )
            await ctx.send(embed=mod_embed)

        elif warning_count >= 5:
            # Ki·ªÉm tra quy·ªÅn ƒëu·ªïi ng∆∞·ªùi
            if ctx.guild.me.guild_permissions.kick_members:
                # C·ªë g·∫Øng g·ª≠i DM cho th√†nh vi√™n tr∆∞·ªõc khi ƒëu·ªïi
                try:
                    dm_embed = create_embed(
                        title="‚ö†Ô∏è T·ª± ƒê·ªông ƒêu·ªïi",
                        description=f"B·∫°n ƒë√£ b·ªã ƒëu·ªïi kh·ªèi server **{ctx.guild.name}** v√¨ nh·∫≠n qu√° nhi·ªÅu c·∫£nh c√°o (5+).",
                        color=discord.Color.red()
                    )
                    await member.send(embed=dm_embed)
                except:
                    pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM

                # ƒêu·ªïi th√†nh vi√™n
                await member.kick(reason=f"T·ª± ƒë·ªông ƒëu·ªïi: Qu√° nhi·ªÅu c·∫£nh c√°o (5+)")

                # Th√¥ng b√°o
                kick_embed = create_embed(
                    title="üö´ T·ª± ƒê·ªông ƒêu·ªïi",
                    description=f"{member.mention} ƒë√£ b·ªã ƒëu·ªïi t·ª± ƒë·ªông do nh·∫≠n qu√° nhi·ªÅu c·∫£nh c√°o (5+).",
                    color=discord.Color.red()
                )
                await ctx.send(embed=kick_embed)

                # Log h√†nh ƒë·ªông
                logger.info(f"H·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông ƒëu·ªïi {member.name} do nh·∫≠n qu√° nhi·ªÅu c·∫£nh c√°o (5+)")

    @commands.command(name="warnings", aliases=["listwarn", "dscanhcao"])
    @commands.has_permissions(manage_messages=True)
    async def list_warnings(self, ctx, member: discord.Member):
        """Li·ªát k√™ c√°c c·∫£nh c√°o c·ªßa m·ªôt th√†nh vi√™n"""
        guild_id = ctx.guild.id
        member_id = member.id

        # Ki·ªÉm tra xem c√≥ c·∫£nh c√°o n√†o kh√¥ng
        if (guild_id not in self.warning_db) or (member_id not in self.warning_db[guild_id]) or (
                not self.warning_db[guild_id][member_id]):
            embed = create_embed(
                title="üìã Danh S√°ch C·∫£nh C√°o",
                description=f"{member.mention} kh√¥ng c√≥ c·∫£nh c√°o n√†o.",
                color=discord.Color.green()
            )
            return await ctx.send(embed=embed)

        # L·∫•y danh s√°ch c·∫£nh c√°o
        warnings = self.warning_db[guild_id][member_id]

        # T·∫°o embed
        embed = create_embed(
            title=f"üìã Danh S√°ch C·∫£nh C√°o - {member.display_name}",
            description=f"{member.mention} c√≥ **{len(warnings)}** c·∫£nh c√°o:",
            color=discord.Color.orange()
        )

        # Th√™m t·ª´ng c·∫£nh c√°o
        for i, warning in enumerate(warnings, 1):
            # L·∫•y th√¥ng tin ng∆∞·ªùi ƒëi·ªÅu h√†nh
            mod_id = warning["moderator_id"]
            mod = ctx.guild.get_member(mod_id)
            mod_name = mod.name if mod else "Kh√¥ng x√°c ƒë·ªãnh"

            # L·∫•y th·ªùi gian
            try:
                timestamp = datetime.datetime.fromisoformat(warning["timestamp"])
                time_str = timestamp.strftime("%d/%m/%Y %H:%M:%S")
            except:
                time_str = "Kh√¥ng x√°c ƒë·ªãnh"

            # Th√™m v√†o embed
            embed.add_field(
                name=f"C·∫£nh C√°o #{i}",
                value=f"**L√Ω do:** {warning['reason']}\n**B·ªüi:** {mod_name}\n**Th·ªùi gian:** {time_str}",
                inline=False
            )

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @commands.command(name="clearwarn", aliases=["delwarn", "xoacanhcao"])
    @commands.has_permissions(manage_messages=True)
    async def clear_warnings(self, ctx, member: discord.Member, index: int = None):
        """X√≥a m·ªôt ho·∫∑c t·∫•t c·∫£ c·∫£nh c√°o c·ªßa m·ªôt th√†nh vi√™n"""
        guild_id = ctx.guild.id
        member_id = member.id

        # Ki·ªÉm tra xem c√≥ c·∫£nh c√°o n√†o kh√¥ng
        if (guild_id not in self.warning_db) or (member_id not in self.warning_db[guild_id]) or (
                not self.warning_db[guild_id][member_id]):
            embed = create_error_embed(
                title="‚ùå Kh√¥ng C√≥ C·∫£nh C√°o",
                description=f"{member.mention} kh√¥ng c√≥ c·∫£nh c√°o n√†o ƒë·ªÉ x√≥a."
            )
            return await ctx.send(embed=embed)

        # X√≥a c·∫£nh c√°o c·ª• th·ªÉ ho·∫∑c t·∫•t c·∫£
        if index is not None:
            # Ki·ªÉm tra index h·ª£p l·ªá
            if index <= 0 or index > len(self.warning_db[guild_id][member_id]):
                embed = create_error_embed(
                    title="‚ùå L·ªói",
                    description=f"Ch·ªâ s·ªë c·∫£nh c√°o kh√¥ng h·ª£p l·ªá. Th√†nh vi√™n c√≥ {len(self.warning_db[guild_id][member_id])} c·∫£nh c√°o, t·ª´ 1 ƒë·∫øn {len(self.warning_db[guild_id][member_id])}."
                )
                return await ctx.send(embed=embed)

            # X√≥a c·∫£nh c√°o c·ª• th·ªÉ
            removed_warning = self.warning_db[guild_id][member_id].pop(index - 1)

            # T·∫°o embed th√¥ng b√°o
            embed = create_success_embed(
                title="‚úÖ ƒê√£ X√≥a C·∫£nh C√°o",
                description=f"ƒê√£ x√≥a c·∫£nh c√°o #{index} c·ªßa {member.mention}."
            )

            # Th√™m th√¥ng tin c·∫£nh c√°o ƒë√£ x√≥a
            embed.add_field(
                name="Th√¥ng Tin C·∫£nh C√°o ƒê√£ X√≥a",
                value=f"**L√Ω do:** {removed_warning['reason']}",
                inline=False
            )

            # G·ª≠i embed th√¥ng b√°o
            await ctx.send(embed=embed)

            # Log h√†nh ƒë·ªông
            logger.info(f"Mod {ctx.author.name} ƒë√£ x√≥a c·∫£nh c√°o #{index} c·ªßa {member.name}")

        else:
            # X√°c nh·∫≠n x√≥a t·∫•t c·∫£
            confirm_embed = create_embed(
                title="‚ö†Ô∏è X√°c Nh·∫≠n",
                description=f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ **{len(self.warning_db[guild_id][member_id])}** c·∫£nh c√°o c·ªßa {member.mention} kh√¥ng?",
                color=discord.Color.orange()
            )

            # G·ª≠i embed x√°c nh·∫≠n
            confirm_msg = await ctx.send(embed=confirm_embed)

            # Th√™m c√°c emoji x√°c nh·∫≠n
            await confirm_msg.add_reaction("‚úÖ")
            await confirm_msg.add_reaction("‚ùå")

            # H√†m ki·ªÉm tra reaction
            def check(reaction, user):
                return user.id == ctx.author.id and str(reaction.emoji) in ["‚úÖ",
                                                                            "‚ùå"] and reaction.message.id == confirm_msg.id

            try:
                # Ch·ªù ph·∫£n ·ª©ng
                reaction, user = await self.bot.wait_for("reaction_add", timeout=30.0, check=check)

                # N·∫øu t·ª´ ch·ªëi
                if str(reaction.emoji) == "‚ùå":
                    cancel_embed = create_embed(
                        title="‚ùå ƒê√£ H·ªßy",
                        description="H√†nh ƒë·ªông x√≥a t·∫•t c·∫£ c·∫£nh c√°o ƒë√£ b·ªã h·ªßy.",
                        color=discord.Color.red()
                    )
                    await confirm_msg.edit(embed=cancel_embed)
                    return

                # L∆∞u s·ªë l∆∞·ª£ng ƒë·ªÉ hi·ªÉn th·ªã
                warning_count = len(self.warning_db[guild_id][member_id])

                # X√≥a t·∫•t c·∫£ c·∫£nh c√°o
                self.warning_db[guild_id][member_id].clear()

                # T·∫°o embed th√¥ng b√°o
                embed = create_success_embed(
                    title="‚úÖ ƒê√£ X√≥a T·∫•t C·∫£ C·∫£nh C√°o",
                    description=f"ƒê√£ x√≥a t·∫•t c·∫£ **{warning_count}** c·∫£nh c√°o c·ªßa {member.mention}."
                )

                # C·∫≠p nh·∫≠t tin nh·∫Øn
                await confirm_msg.edit(embed=embed)

                # Log h√†nh ƒë·ªông
                logger.info(f"Mod {ctx.author.name} ƒë√£ x√≥a t·∫•t c·∫£ c·∫£nh c√°o c·ªßa {member.name}")

                return

            except asyncio.TimeoutError:
                # N·∫øu h·∫øt th·ªùi gian
                timeout_embed = create_embed(
                    title="‚è∞ H·∫øt Th·ªùi Gian",
                    description="ƒê√£ h·∫øt th·ªùi gian x√°c nh·∫≠n. H√†nh ƒë·ªông b·ªã h·ªßy.",
                    color=discord.Color.red()
                )
                await confirm_msg.edit(embed=timeout_embed)
                return

    @commands.command(name="mute", aliases=["cam_chat"])
    @commands.has_permissions(manage_roles=True)
    async def mute_member(self, ctx, member: discord.Member, duration: Optional[str] = None, *,
                          reason: str = "Kh√¥ng c√≥ l√Ω do"):
        """C·∫•m chat m·ªôt th√†nh vi√™n"""
        # Ki·ªÉm tra quy·ªÅn h·∫°n
        if member.top_role >= ctx.author.top_role and ctx.author.id != ctx.guild.owner_id:
            embed = create_error_embed(
                title="‚ùå L·ªói Quy·ªÅn H·∫°n",
                description="B·∫°n kh√¥ng th·ªÉ c·∫•m chat th√†nh vi√™n c√≥ vai tr√≤ cao h∆°n ho·∫∑c ngang v·ªõi b·∫°n."
            )
            return await ctx.send(embed=embed)

        if member.top_role >= ctx.guild.me.top_role:
            embed = create_error_embed(
                title="‚ùå L·ªói Quy·ªÅn H·∫°n",
                description="Bot kh√¥ng th·ªÉ c·∫•m chat th√†nh vi√™n c√≥ vai tr√≤ cao h∆°n ho·∫∑c ngang v·ªõi bot."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra vai tr√≤ Muted
        muted_role = discord.utils.get(ctx.guild.roles, name="Muted")

        # N·∫øu ch∆∞a c√≥ vai tr√≤ Muted, t·∫°o m·ªõi
        if not muted_role:
            try:
                # T·∫°o vai tr√≤ m·ªõi
                muted_role = await ctx.guild.create_role(
                    name="Muted",
                    reason="T·∫°o vai tr√≤ Muted cho l·ªánh mute"
                )

                # C·∫≠p nh·∫≠t quy·ªÅn cho t·∫•t c·∫£ k√™nh
                for channel in ctx.guild.channels:
                    await channel.set_permissions(
                        muted_role,
                        send_messages=False,
                        speak=False,
                        add_reactions=False
                    )
            except Exception as e:
                # N·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c vai tr√≤
                embed = create_error_embed(
                    title="‚ùå L·ªói",
                    description=f"Kh√¥ng th·ªÉ t·∫°o vai tr√≤ Muted: {str(e)}"
                )
                return await ctx.send(embed=embed)

        # Ki·ªÉm tra ƒë√£ c√≥ vai tr√≤ Muted ch∆∞a
        if muted_role in member.roles:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"{member.mention} ƒë√£ b·ªã c·∫•m chat r·ªìi."
            )
            return await ctx.send(embed=embed)

        # Ph√¢n t√≠ch th·ªùi gian
        duration_seconds = 0
        if duration:
            duration_seconds = self.parse_time(duration)

        # Th√™m vai tr√≤ Muted
        await member.add_roles(muted_role, reason=f"B·ªüi {ctx.author.name}: {reason}")

        # C·ªë g·∫Øng g·ª≠i DM cho th√†nh vi√™n
        try:
            dm_embed = create_embed(
                title="‚ö†Ô∏è B·∫°n ƒê√£ B·ªã C·∫•m Chat",
                description=(
                    f"B·∫°n ƒë√£ b·ªã c·∫•m chat trong server **{ctx.guild.name}**.\n\n"
                    f"**L√Ω do:** {reason}\n"
                    f"**Th·ªùi h·∫°n:** {duration if duration else 'V√¥ th·ªùi h·∫°n'}"
                ),
                color=discord.Color.red()
            )
            await member.send(embed=dm_embed)
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM

        # T·∫°o embed th√¥ng b√°o
        embed = create_success_embed(
            title="üîá ƒê√£ C·∫•m Chat",
            description=(
                f"{member.mention} ƒë√£ b·ªã c·∫•m chat.\n\n"
                f"**L√Ω do:** {reason}\n"
                f"**Th·ªùi h·∫°n:** {duration if duration else 'V√¥ th·ªùi h·∫°n'}"
            )
        )

        # G·ª≠i embed
        mute_msg = await ctx.send(embed=embed)

        # Log h√†nh ƒë·ªông
        logger.info(
            f"Mod {ctx.author.name} ƒë√£ c·∫•m chat {member.name} v·ªõi l√Ω do: {reason}, th·ªùi h·∫°n: {duration if duration else 'V√¥ th·ªùi h·∫°n'}")

        # N·∫øu c√≥ th·ªùi h·∫°n, ƒë·∫∑t h·∫πn gi·ªù h·ªßy c·∫•m chat
        if duration_seconds > 0:
            # T·∫°o task ƒë·ªÉ h·ªßy c·∫•m chat sau khi h·∫øt th·ªùi gian
            await asyncio.sleep(duration_seconds)

            # Ki·ªÉm tra xem th√†nh vi√™n c√≤n trong server kh√¥ng
            member = ctx.guild.get_member(member.id)
            if not member:
                return

            # Ki·ªÉm tra xem th√†nh vi√™n c√≤n b·ªã c·∫•m chat kh√¥ng
            if muted_role in member.roles:
                # H·ªßy c·∫•m chat
                await member.remove_roles(muted_role, reason="H·∫øt th·ªùi h·∫°n c·∫•m chat")

                # T·∫°o embed th√¥ng b√°o
                unmute_embed = create_success_embed(
                    title="üîä ƒê√£ H·∫øt Th·ªùi H·∫°n C·∫•m Chat",
                    description=f"{member.mention} ƒë√£ ƒë∆∞·ª£c h·ªßy c·∫•m chat t·ª± ƒë·ªông sau khi h·∫øt th·ªùi h·∫°n."
                )

                # G·ª≠i embed
                await ctx.send(embed=unmute_embed)

                # C·ªë g·∫Øng g·ª≠i DM cho th√†nh vi√™n
                try:
                    dm_embed = create_embed(
                        title="‚úÖ H·∫øt Th·ªùi H·∫°n C·∫•m Chat",
                        description=f"B·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy c·∫•m chat trong server **{ctx.guild.name}** sau khi h·∫øt th·ªùi h·∫°n.",
                        color=discord.Color.green()
                    )
                    await member.send(embed=dm_embed)
                except:
                    pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM

                # Log h√†nh ƒë·ªông
                logger.info(f"H·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông h·ªßy c·∫•m chat cho {member.name} sau khi h·∫øt th·ªùi h·∫°n")

    @commands.command(name="unmute", aliases=["huycamchat"])
    @commands.has_permissions(manage_roles=True)
    async def unmute_member(self, ctx, member: discord.Member, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
        """H·ªßy c·∫•m chat m·ªôt th√†nh vi√™n"""
        # Ki·ªÉm tra vai tr√≤ Muted
        muted_role = discord.utils.get(ctx.guild.roles, name="Muted")

        # N·∫øu kh√¥ng c√≥ vai tr√≤ Muted
        if not muted_role:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Kh√¥ng t√¨m th·∫•y vai tr√≤ Muted trong server n√†y."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra xem th√†nh vi√™n c√≥ b·ªã c·∫•m chat kh√¥ng
        if muted_role not in member.roles:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"{member.mention} kh√¥ng b·ªã c·∫•m chat."
            )
            return await ctx.send(embed=embed)

        # H·ªßy c·∫•m chat
        await member.remove_roles(muted_role, reason=f"B·ªüi {ctx.author.name}: {reason}")

        # T·∫°o embed th√¥ng b√°o
        embed = create_success_embed(
            title="üîä ƒê√£ H·ªßy C·∫•m Chat",
            description=f"{member.mention} ƒë√£ ƒë∆∞·ª£c h·ªßy c·∫•m chat.\n\n**L√Ω do:** {reason}"
        )

        # G·ª≠i embed
        await ctx.send(embed=embed)

        # C·ªë g·∫Øng g·ª≠i DM cho th√†nh vi√™n
        try:
            dm_embed = create_embed(
                title="‚úÖ B·∫°n ƒê√£ ƒê∆∞·ª£c H·ªßy C·∫•m Chat",
                description=f"B·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy c·∫•m chat trong server **{ctx.guild.name}**.\n\n**L√Ω do:** {reason}",
                color=discord.Color.green()
            )
            await member.send(embed=dm_embed)
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM

        # Log h√†nh ƒë·ªông
        logger.info(f"Mod {ctx.author.name} ƒë√£ h·ªßy c·∫•m chat cho {member.name} v·ªõi l√Ω do: {reason}")

    @commands.command(name="slowmode", aliases=["cham", "slow"])
    @commands.has_permissions(manage_channels=True)
    async def set_slowmode(self, ctx, seconds: int = None):
        """ƒê·∫∑t ch·∫ø ƒë·ªô ch·∫≠m cho k√™nh hi·ªán t·∫°i"""
        # N·∫øu kh√¥ng cung c·∫•p th·ªùi gian, hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
        if seconds is None:
            current_slowmode = ctx.channel.slowmode_delay

            if current_slowmode == 0:
                embed = create_embed(
                    title="‚è±Ô∏è Ch·∫ø ƒê·ªô Ch·∫≠m",
                    description=f"Ch·∫ø ƒë·ªô ch·∫≠m hi·ªán t·∫°i c·ªßa k√™nh {ctx.channel.mention} ƒëang t·∫Øt.",
                    color=discord.Color.blue()
                )
            else:
                embed = create_embed(
                    title="‚è±Ô∏è Ch·∫ø ƒê·ªô Ch·∫≠m",
                    description=f"Ch·∫ø ƒë·ªô ch·∫≠m hi·ªán t·∫°i c·ªßa k√™nh {ctx.channel.mention} l√† **{current_slowmode}** gi√¢y.",
                    color=discord.Color.blue()
                )

            # Th√™m h∆∞·ªõng d·∫´n
            embed.add_field(
                name="H∆∞·ªõng D·∫´n",
                value="S·ª≠ d·ª•ng `!slowmode <seconds>` ƒë·ªÉ ƒë·∫∑t ch·∫ø ƒë·ªô ch·∫≠m, ho·∫∑c `!slowmode 0` ƒë·ªÉ t·∫Øt ch·∫ø ƒë·ªô ch·∫≠m.",
                inline=False
            )

            return await ctx.send(embed=embed)

        # Ki·ªÉm tra gi·ªõi h·∫°n
        if seconds < 0:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Th·ªùi gian ch·∫ø ƒë·ªô ch·∫≠m kh√¥ng th·ªÉ l√† s·ªë √¢m."
            )
            return await ctx.send(embed=embed)

        if seconds > 21600:  # 6 gi·ªù
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Th·ªùi gian ch·∫ø ƒë·ªô ch·∫≠m kh√¥ng th·ªÉ v∆∞·ª£t qu√° 21600 gi√¢y (6 gi·ªù)."
            )
            return await ctx.send(embed=embed)

        # ƒê·∫∑t ch·∫ø ƒë·ªô ch·∫≠m
        await ctx.channel.edit(slowmode_delay=seconds)

        # T·∫°o embed th√¥ng b√°o
        if seconds == 0:
            embed = create_success_embed(
                title="‚úÖ ƒê√£ T·∫Øt Ch·∫ø ƒê·ªô Ch·∫≠m",
                description=f"ƒê√£ t·∫Øt ch·∫ø ƒë·ªô ch·∫≠m cho k√™nh {ctx.channel.mention}."
            )
        else:
            embed = create_success_embed(
                title="‚è±Ô∏è ƒê√£ ƒê·∫∑t Ch·∫ø ƒê·ªô Ch·∫≠m",
                description=f"ƒê√£ ƒë·∫∑t ch·∫ø ƒë·ªô ch·∫≠m **{seconds}** gi√¢y cho k√™nh {ctx.channel.mention}."
            )

        # G·ª≠i embed
        await ctx.send(embed=embed)

        # Log h√†nh ƒë·ªông
        if seconds == 0:
            logger.info(f"Mod {ctx.author.name} ƒë√£ t·∫Øt ch·∫ø ƒë·ªô ch·∫≠m cho k√™nh {ctx.channel.name}")
        else:
            logger.info(f"Mod {ctx.author.name} ƒë√£ ƒë·∫∑t ch·∫ø ƒë·ªô ch·∫≠m {seconds} gi√¢y cho k√™nh {ctx.channel.name}")

    def parse_time(self, time_str: str) -> int:
        """Ph√¢n t√≠ch chu·ªói th·ªùi gian v√† chuy·ªÉn ƒë·ªïi th√†nh s·ªë gi√¢y"""
        import re

        # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† chuy·ªÉn sang ch·ªØ th∆∞·ªùng
        time_str = time_str.lower().strip()

        # Th·ªùi gian m·∫∑c ƒë·ªãnh (1 gi·ªù)
        if time_str.isdigit():
            return int(time_str) * 60  # N·∫øu ch·ªâ l√† s·ªë, gi·∫£ ƒë·ªãnh l√† ph√∫t

        # T√¨m ki·∫øm c√°c ƒë∆°n v·ªã th·ªùi gian
        seconds = 0

        # T√¨m ki·∫øm s·ªë gi√¢y (s)
        if 's' in time_str:
            s_match = re.search(r'(\d+)s', time_str)
            if s_match:
                seconds += int(s_match.group(1))

        # T√¨m ki·∫øm s·ªë ph√∫t (m)
        if 'm' in time_str:
            m_match = re.search(r'(\d+)m', time_str)
            if m_match:
                seconds += int(m_match.group(1)) * 60

        # T√¨m ki·∫øm s·ªë gi·ªù (h)
        if 'h' in time_str:
            h_match = re.search(r'(\d+)h', time_str)
            if h_match:
                seconds += int(h_match.group(1)) * 3600

        # T√¨m ki·∫øm s·ªë ng√†y (d)
        if 'd' in time_str:
            d_match = re.search(r'(\d+)d', time_str)
            if d_match:
                seconds += int(d_match.group(1)) * 86400

        # N·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã th·ªùi gian, gi·∫£ ƒë·ªãnh l√† ph√∫t
        if seconds == 0:
            try:
                seconds = int(re.search(r'(\d+)', time_str).group(1)) * 60
            except (AttributeError, ValueError):
                seconds = 3600  # M·∫∑c ƒë·ªãnh 1 gi·ªù

        return seconds

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        """X·ª≠ l√Ω l·ªói l·ªánh"""
        if isinstance(error, commands.MissingRequiredArgument):
            embed = create_error_embed(
                title="‚ùå Thi·∫øu Tham S·ªë",
                description=f"Thi·∫øu tham s·ªë c·∫ßn thi·∫øt: `{error.param.name}`.\nVui l√≤ng s·ª≠ d·ª•ng `!help {ctx.command}` ƒë·ªÉ xem c√°ch s·ª≠ d·ª•ng l·ªánh."
            )
            await ctx.send(embed=embed)

        elif isinstance(error, commands.BadArgument):
            embed = create_error_embed(
                title="‚ùå Tham S·ªë Kh√¥ng H·ª£p L·ªá",
                description=f"Tham s·ªë kh√¥ng h·ª£p l·ªá: {str(error)}.\nVui l√≤ng s·ª≠ d·ª•ng `!help {ctx.command}` ƒë·ªÉ xem c√°ch s·ª≠ d·ª•ng l·ªánh."
            )
            await ctx.send(embed=embed)

        elif isinstance(error, commands.MissingPermissions):
            embed = create_error_embed(
                title="‚ùå Kh√¥ng ƒê·ªß Quy·ªÅn H·∫°n",
                description="B·∫°n kh√¥ng c√≥ ƒë·ªß quy·ªÅn h·∫°n ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y."
            )
            await ctx.send(embed=embed)

        elif isinstance(error, commands.BotMissingPermissions):
            embed = create_error_embed(
                title="‚ùå Bot Kh√¥ng ƒê·ªß Quy·ªÅn H·∫°n",
                description=f"Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn h·∫°n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.\nC·∫ßn quy·ªÅn: {', '.join(error.missing_permissions)}"
            )
            await ctx.send(embed=embed)

        elif isinstance(error, commands.CommandOnCooldown):
            embed = create_error_embed(
                title="‚è±Ô∏è L·ªánh ƒêang Trong Th·ªùi Gian H·ªìi",
                description=f"Vui l√≤ng th·ª≠ l·∫°i sau {error.retry_after:.2f} gi√¢y."
            )
            await ctx.send(embed=embed)

        elif isinstance(error, commands.CheckFailure):
            embed = create_error_embed(
                title="‚ùå Kh√¥ng Th·ªÉ Th·ª±c Hi·ªán",
                description="B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y."
            )
            await ctx.send(embed=embed)

        else:
            # Log l·ªói kh√¥ng x√°c ƒë·ªãnh
            logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi th·ª±c hi·ªán l·ªánh {ctx.command}: {error}", exc_info=error)

            embed = create_error_embed(
                title="‚ùå ƒê√£ X·∫£y Ra L·ªói",
                description="ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh n√†y. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n."
            )
            await ctx.send(embed=embed)


def setup(bot):
    bot.add_cog(ModerationCog(bot))
