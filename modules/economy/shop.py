# modules/economy/shop.py
import discord
from discord.ext import commands
import asyncio
import datetime
import random
import logging
from typing import Dict, List, Optional, Union, Any

from database.mongo_handler import MongoHandler
from database.models.user_model import User
from utils.embed_utils import create_embed, create_success_embed, create_error_embed
from utils.text_utils import format_number, progress_bar

# C·∫•u h√¨nh logging
logger = logging.getLogger("tutien-bot.shop")


class ShopCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.mongo_handler = MongoHandler()
        self.shop_items = {}
        self.load_shop_data()

        # Danh s√°ch c√°c c·ª≠a h√†ng
        self.shops = {
            "general": {
                "name": "C·ª≠a H√†ng T·ªïng H·ª£p",
                "description": "N∆°i b√°n c√°c v·∫≠t ph·∫©m c∆° b·∫£n cho tu ti√™n gi·∫£",
                "emoji": "üè™",
                "items": ["minor_healing_pill", "minor_mana_pill", "qi_gathering_stone", "spirit_stone_pouch",
                          "basic_talisman"]
            },
            "alchemy": {
                "name": "L√≤ ƒêan D∆∞·ª£c",
                "description": "N∆°i b√°n c√°c lo·∫°i ƒëan d∆∞·ª£c v√† nguy√™n li·ªáu luy·ªán ƒëan",
                "emoji": "üß™",
                "items": ["minor_herb", "common_herb", "foundation_pill", "qi_condensation_pill",
                          "meridian_cleansing_pill"]
            },
            "weapons": {
                "name": "V≈© Kh√≠ C√°c",
                "description": "N∆°i b√°n c√°c lo·∫°i v≈© kh√≠ cho tu ti√™n gi·∫£",
                "emoji": "‚öîÔ∏è",
                "items": ["basic_sword", "iron_sword", "spirit_sword", "basic_saber", "iron_saber"]
            },
            "armor": {
                "name": "Ph√≤ng C·ª• C√°c",
                "description": "N∆°i b√°n c√°c lo·∫°i √°o gi√°p v√† ph√≤ng c·ª•",
                "emoji": "üõ°Ô∏è",
                "items": ["basic_robe", "iron_armor", "spirit_robe", "basic_boots", "iron_boots"]
            },
            "accessories": {
                "name": "Ph√π L·ª•c C√°c",
                "description": "N∆°i b√°n c√°c lo·∫°i ph√π l·ª•c v√† trang s·ª©c",
                "emoji": "üìø",
                "items": ["basic_talisman", "spirit_talisman", "basic_ring", "basic_necklace", "spirit_bead"]
            },
            "books": {
                "name": "Th∆∞ C√°c",
                "description": "N∆°i b√°n c√°c lo·∫°i c√¥ng ph√°p v√† b√≠ k√≠p",
                "emoji": "üìö",
                "items": ["basic_cultivation_manual", "basic_sword_technique", "basic_body_technique",
                          "basic_alchemy_manual", "basic_talisman_technique"]
            },
            "sect": {
                "name": "C·ª≠a H√†ng M√¥n Ph√°i",
                "description": "N∆°i ƒë·ªïi ƒëi·ªÉm c·ªëng hi·∫øn l·∫•y v·∫≠t ph·∫©m ƒë·∫∑c bi·ªát",
                "emoji": "üèØ",
                "items": ["sect_cultivation_manual", "sect_weapon", "sect_armor", "sect_pill", "sect_talisman"],
                "currency": "contribution"
            }
        }

    def load_shop_data(self):
        """T·∫£i d·ªØ li·ªáu c·ª≠a h√†ng t·ª´ file JSON"""
        import json
        import os

        try:
            with open(os.path.join("data", "items.json"), "r", encoding="utf-8") as f:
                self.shop_items = json.load(f)
            logger.info(f"ƒê√£ t·∫£i {len(self.shop_items)} v·∫≠t ph·∫©m t·ª´ file JSON")
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu c·ª≠a h√†ng: {e}")

    async def get_user_data(self, user_id: int) -> Optional[User]:
        """L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ database"""
        user_data = await self.mongo_handler.find_one_async("users", {"user_id": user_id})
        if user_data:
            return User.from_dict(user_data)
        return None

    async def save_user_data(self, user: User) -> bool:
        """L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng v√†o database"""
        result = await self.mongo_handler.update_one_async(
            "users",
            {"user_id": user.user_id},
            {"$set": user.to_dict()},
            upsert=True
        )
        return result.acknowledged

    @commands.group(name="shop", aliases=["cuahang", "store"], invoke_without_command=True)
    async def shop(self, ctx):
        """Hi·ªÉn th·ªã danh s√°ch c√°c c·ª≠a h√†ng"""
        # T·∫°o embed hi·ªÉn th·ªã danh s√°ch c·ª≠a h√†ng
        embed = create_embed(
            title="üè™ H·ªá Th·ªëng C·ª≠a H√†ng",
            description="Ch√†o m·ª´ng ƒë·∫øn v·ªõi khu ch·ª£! D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c c·ª≠a h√†ng:"
        )

        # Th√™m th√¥ng tin t·ª´ng c·ª≠a h√†ng
        for shop_id, shop_info in self.shops.items():
            embed.add_field(
                name=f"{shop_info['emoji']} {shop_info['name']}",
                value=f"{shop_info['description']}\nS·ª≠ d·ª•ng `!shop {shop_id}` ƒë·ªÉ xem",
                inline=False
            )

        # Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        embed.set_footer(text="S·ª≠ d·ª•ng !shop <t√™n c·ª≠a h√†ng> ƒë·ªÉ xem c√°c v·∫≠t ph·∫©m trong c·ª≠a h√†ng")

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @shop.command(name="general", aliases=["tonghop"])
    async def shop_general(self, ctx, page: int = 1):
        """Hi·ªÉn th·ªã c·ª≠a h√†ng t·ªïng h·ª£p"""
        await self.show_shop(ctx, "general", page)

    @shop.command(name="alchemy", aliases=["danduoc", "dan"])
    async def shop_alchemy(self, ctx, page: int = 1):
        """Hi·ªÉn th·ªã l√≤ ƒëan d∆∞·ª£c"""
        await self.show_shop(ctx, "alchemy", page)

    @shop.command(name="weapons", aliases=["vukhi"])
    async def shop_weapons(self, ctx, page: int = 1):
        """Hi·ªÉn th·ªã v≈© kh√≠ c√°c"""
        await self.show_shop(ctx, "weapons", page)

    @shop.command(name="armor", aliases=["giap", "phongcu"])
    async def shop_armor(self, ctx, page: int = 1):
        """Hi·ªÉn th·ªã ph√≤ng c·ª• c√°c"""
        await self.show_shop(ctx, "armor", page)

    @shop.command(name="accessories", aliases=["phuluc", "trangsuc"])
    async def shop_accessories(self, ctx, page: int = 1):
        """Hi·ªÉn th·ªã ph√π l·ª•c c√°c"""
        await self.show_shop(ctx, "accessories", page)

    @shop.command(name="books", aliases=["thucac", "congphap"])
    async def shop_books(self, ctx, page: int = 1):
        """Hi·ªÉn th·ªã th∆∞ c√°c"""
        await self.show_shop(ctx, "books", page)

    @shop.command(name="sect", aliases=["monphai"])
    async def shop_sect(self, ctx, page: int = 1):
        """Hi·ªÉn th·ªã c·ª≠a h√†ng m√¥n ph√°i"""
        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong m√¥n ph√°i kh√¥ng
        user = await self.get_user_data(ctx.author.id)
        if not user:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu ti√™n. H√£y s·ª≠ d·ª•ng l·ªánh `!start` ƒë·ªÉ b·∫Øt ƒë·∫ßu."
            )
            return await ctx.send(embed=embed)

        if not user.sect["sect_id"]:
            embed = create_error_embed(
                title="‚ùå Kh√¥ng Th·ªÉ Truy C·∫≠p",
                description="B·∫°n kh√¥ng thu·ªôc m√¥n ph√°i n√†o. H√£y gia nh·∫≠p m·ªôt m√¥n ph√°i ƒë·ªÉ truy c·∫≠p c·ª≠a h√†ng n√†y."
            )
            return await ctx.send(embed=embed)

        await self.show_shop(ctx, "sect", page)

    async def show_shop(self, ctx, shop_id: str, page: int = 1):
        """Hi·ªÉn th·ªã c·ª≠a h√†ng c·ª• th·ªÉ"""
        # Ki·ªÉm tra shop_id h·ª£p l·ªá
        if shop_id not in self.shops:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng {shop_id}."
            )
            return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin c·ª≠a h√†ng
        shop_info = self.shops[shop_id]

        # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng
        user = await self.get_user_data(ctx.author.id)
        if not user:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu ti√™n. H√£y s·ª≠ d·ª•ng l·ªánh `!start` ƒë·ªÉ b·∫Øt ƒë·∫ßu."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra trang h·ª£p l·ªá
        if page < 1:
            page = 1

        # S·ªë v·∫≠t ph·∫©m m·ªói trang
        items_per_page = 5

        # T√≠nh to√°n s·ªë trang
        total_items = len(shop_info["items"])
        total_pages = max(1, (total_items + items_per_page - 1) // items_per_page)

        if page > total_pages:
            page = total_pages

        # T√≠nh ch·ªâ s·ªë b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        start_idx = (page - 1) * items_per_page
        end_idx = min(start_idx + items_per_page, total_items)

        # Lo·∫°i ti·ªÅn t·ªá
        currency = shop_info.get("currency", "spirit_stones")
        currency_name = "linh th·∫°ch" if currency == "spirit_stones" else "ƒëi·ªÉm c·ªëng hi·∫øn"
        currency_emoji = "üí∞" if currency == "spirit_stones" else "üèÜ"

        # S·ªë d∆∞ hi·ªán t·∫°i
        balance = user.resources[currency]

        # T·∫°o embed hi·ªÉn th·ªã c·ª≠a h√†ng
        embed = create_embed(
            title=f"{shop_info['emoji']} {shop_info['name']}",
            description=f"{shop_info['description']}\n\n"
                        f"S·ªë d∆∞: {format_number(balance)} {currency_name} {currency_emoji}\n"
                        f"Trang {page}/{total_pages}"
        )

        # Th√™m th√¥ng tin v·∫≠t ph·∫©m
        current_items = shop_info["items"][start_idx:end_idx]

        for i, item_id in enumerate(current_items, start=start_idx + 1):
            # L·∫•y th√¥ng tin v·∫≠t ph·∫©m
            item_data = self.shop_items.get(item_id)

            if item_data:
                # ƒê·ªãnh d·∫°ng t√™n v·∫≠t ph·∫©m theo ƒë·ªô hi·∫øm
                rarity_icons = {
                    "common": "‚ö™",
                    "uncommon": "üü¢",
                    "rare": "üîµ",
                    "epic": "üü£",
                    "legendary": "üü†",
                    "mythic": "üî¥",
                    "divine": "üü°",
                    "artifact": "‚ö°"
                }

                rarity_icon = rarity_icons.get(item_data.get("rarity", "common"), "‚ö™")
                item_name = f"{rarity_icon} {item_data['name']}"

                # Gi√° b√°n
                price = item_data.get("value", 100)
                if currency == "contribution":
                    price = item_data.get("contribution_value", price // 2)

                # Hi·ªÉn th·ªã m√¥ t·∫£ v√† gi√°
                value = f"{item_data.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}\n"
                value += f"Gi√°: **{format_number(price)}** {currency_name} {currency_emoji}"

                # Th√™m y√™u c·∫ßu n·∫øu c√≥
                if "required_realm" in item_data and item_data["required_realm"]:
                    value += f"\nY√™u c·∫ßu: {item_data['required_realm']}"

                embed.add_field(
                    name=f"{i}. {item_name}",
                    value=value,
                    inline=False
                )
            else:
                embed.add_field(
                    name=f"{i}. V·∫≠t ph·∫©m kh√¥ng x√°c ƒë·ªãnh",
                    value=f"ID: {item_id}",
                    inline=False
                )

        # Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        embed.set_footer(text=f"S·ª≠ d·ª•ng !buy {shop_id} <s·ªë th·ª© t·ª±> [s·ªë l∆∞·ª£ng] ƒë·ªÉ mua v·∫≠t ph·∫©m")

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @commands.command(name="buy", aliases=["mua"])
    async def buy_item(self, ctx, shop_id: str, item_index: int, quantity: int = 1):
        """Mua v·∫≠t ph·∫©m t·ª´ c·ª≠a h√†ng"""
        # Ki·ªÉm tra shop_id h·ª£p l·ªá
        if shop_id not in self.shops:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng {shop_id}."
            )
            return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin c·ª≠a h√†ng
        shop_info = self.shops[shop_id]

        # Ki·ªÉm tra n·∫øu l√† c·ª≠a h√†ng m√¥n ph√°i
        if shop_id == "sect":
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong m√¥n ph√°i kh√¥ng
            user = await self.get_user_data(ctx.author.id)
            if not user:
                embed = create_error_embed(
                    title="‚ùå L·ªói",
                    description="B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu ti√™n. H√£y s·ª≠ d·ª•ng l·ªánh `!start` ƒë·ªÉ b·∫Øt ƒë·∫ßu."
                )
                return await ctx.send(embed=embed)

            if not user.sect["sect_id"]:
                embed = create_error_embed(
                    title="‚ùå Kh√¥ng Th·ªÉ Truy C·∫≠p",
                    description="B·∫°n kh√¥ng thu·ªôc m√¥n ph√°i n√†o. H√£y gia nh·∫≠p m·ªôt m√¥n ph√°i ƒë·ªÉ truy c·∫≠p c·ª≠a h√†ng n√†y."
                )
                return await ctx.send(embed=embed)

        # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng
        user = await self.get_user_data(ctx.author.id)
        if not user:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu ti√™n. H√£y s·ª≠ d·ª•ng l·ªánh `!start` ƒë·ªÉ b·∫Øt ƒë·∫ßu."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra s·ªë l∆∞·ª£ng
        if quantity <= 0:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra ch·ªâ s·ªë v·∫≠t ph·∫©m h·ª£p l·ªá
        shop_items = shop_info["items"]
        if item_index < 1 or item_index > len(shop_items):
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"Ch·ªâ s·ªë v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá. Ph·∫£i t·ª´ 1 ƒë·∫øn {len(shop_items)}."
            )
            return await ctx.send(embed=embed)

        # L·∫•y ID v·∫≠t ph·∫©m
        item_id = shop_items[item_index - 1]

        # L·∫•y th√¥ng tin v·∫≠t ph·∫©m
        item_data = self.shop_items.get(item_id)
        if not item_data:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ v·∫≠t ph·∫©m c√≥ ID: {item_id}."
            )
            return await ctx.send(embed=embed)

        # Lo·∫°i ti·ªÅn t·ªá
        currency = shop_info.get("currency", "spirit_stones")
        currency_name = "linh th·∫°ch" if currency == "spirit_stones" else "ƒëi·ªÉm c·ªëng hi·∫øn"

        # Gi√° b√°n
        price = item_data.get("value", 100)
        if currency == "contribution":
            price = item_data.get("contribution_value", price // 2)

        # T√≠nh t·ªïng gi√°
        total_price = price * quantity

        # Ki·ªÉm tra xem c√≥ ƒë·ªß ti·ªÅn kh√¥ng
        if user.resources[currency] < total_price:
            embed = create_error_embed(
                title="‚ùå Kh√¥ng ƒë·ªß ti·ªÅn",
                description=f"B·∫°n kh√¥ng c√≥ ƒë·ªß {currency_name}. C·∫ßn {format_number(total_price)} {currency_name} ƒë·ªÉ mua {quantity} {item_data['name']}."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra y√™u c·∫ßu c·∫£nh gi·ªõi
        if "required_realm" in item_data and item_data["required_realm"]:
            realm_levels = ["Luy·ªán Kh√≠", "Tr√∫c C∆°", "Kim ƒêan", "Nguy√™n Anh", "H√≥a Th·∫ßn", "Luy·ªán H∆∞", "H·ª£p Th·ªÉ",
                            "ƒê·∫°i Th·ª´a", "ƒê·ªô Ki·∫øp", "Ti√™n Nh√¢n"]
            required_realm_index = realm_levels.index(item_data["required_realm"]) if item_data[
                                                                                          "required_realm"] in realm_levels else -1
            current_realm_index = realm_levels.index(user.cultivation["realm"]) if user.cultivation[
                                                                                       "realm"] in realm_levels else -1

            if current_realm_index < required_realm_index:
                embed = create_error_embed(
                    title="‚ùå C·∫£nh gi·ªõi kh√¥ng ƒë·ªß",
                    description=f"C·∫£nh gi·ªõi c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ mua v·∫≠t ph·∫©m n√†y. Y√™u c·∫ßu: {item_data['required_realm']}"
                )
                return await ctx.send(embed=embed)

        # Ki·ªÉm tra s·ª©c ch·ª©a kho ƒë·ªì
        if not item_data.get("stackable", True):
            # N·∫øu v·∫≠t ph·∫©m kh√¥ng th·ªÉ x·∫øp ch·ªìng, m·ªói v·∫≠t ph·∫©m chi·∫øm 1 √¥
            current_items = len(user.inventory["items"])
            if current_items + quantity > user.inventory["capacity"]:
                embed = create_error_embed(
                    title="‚ùå Kho ƒë·ªì ƒë·∫ßy",
                    description=f"Kho ƒë·ªì c·ªßa b·∫°n kh√¥ng ƒë·ªß ch·ªó. C·∫ßn {quantity} √¥ tr·ªëng."
                )
                return await ctx.send(embed=embed)
        else:
            # N·∫øu v·∫≠t ph·∫©m c√≥ th·ªÉ x·∫øp ch·ªìng, ki·ªÉm tra xem c√≥ ƒë·ªß ch·ªó kh√¥ng
            # ƒê·∫øm s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m hi·ªán c√≥
            existing_quantity = 0
            for item in user.inventory["items"]:
                if item["item_id"] == item_id:
                    existing_quantity += item["quantity"]

            # N·∫øu ch∆∞a c√≥ v·∫≠t ph·∫©m n√†y, c·∫ßn 1 √¥ tr·ªëng
            if existing_quantity == 0:
                current_items = len(user.inventory["items"])
                if current_items >= user.inventory["capacity"]:
                    embed = create_error_embed(
                        title="‚ùå Kho ƒë·ªì ƒë·∫ßy",
                        description="Kho ƒë·ªì c·ªßa b·∫°n ƒë√£ ƒë·∫ßy. H√£y v·ª©t b·ªè m·ªôt s·ªë v·∫≠t ph·∫©m ƒë·ªÉ c√≥ ch·ªó tr·ªëng."
                    )
                    return await ctx.send(embed=embed)

        # Tr·ª´ ti·ªÅn
        if currency == "spirit_stones":
            user.spend_spirit_stones(total_price)
        else:
            user.resources[currency] -= total_price

        # Th√™m v·∫≠t ph·∫©m v√†o kho ƒë·ªì
        user.add_item(item_id, quantity)

        # L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng
        await self.save_user_data(user)

        # T·∫°o embed th√¥ng b√°o
        embed = create_success_embed(
            title="‚úÖ Mua H√†ng Th√†nh C√¥ng",
            description=f"B·∫°n ƒë√£ mua {quantity} {item_data['name']} v·ªõi gi√° {format_number(total_price)} {currency_name}."
        )

        # Th√™m th√¥ng tin s·ªë d∆∞ c√≤n l·∫°i
        embed.add_field(
            name="S·ªë d∆∞ c√≤n l·∫°i",
            value=f"{format_number(user.resources[currency])} {currency_name}",
            inline=False
        )

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @commands.command(name="sell", aliases=["ban"])
    async def sell_item(self, ctx, item_index: int, quantity: int = 1):
        """B√°n v·∫≠t ph·∫©m ƒë·ªÉ l·∫•y linh th·∫°ch"""
        # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng
        user = await self.get_user_data(ctx.author.id)
        if not user:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu ti√™n. H√£y s·ª≠ d·ª•ng l·ªánh `!start` ƒë·ªÉ b·∫Øt ƒë·∫ßu."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra s·ªë l∆∞·ª£ng
        if quantity <= 0:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra ch·ªâ s·ªë v·∫≠t ph·∫©m h·ª£p l·ªá
        if item_index < 1 or item_index > len(user.inventory["items"]):
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"Ch·ªâ s·ªë v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá. Ph·∫£i t·ª´ 1 ƒë·∫øn {len(user.inventory['items'])}."
            )
            return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin v·∫≠t ph·∫©m
        item_entry = user.inventory["items"][item_index - 1]
        item_id = item_entry["item_id"]
        max_quantity = item_entry["quantity"]

        # Ki·ªÉm tra s·ªë l∆∞·ª£ng
        if quantity > max_quantity:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"B·∫°n ch·ªâ c√≥ {max_quantity} v·∫≠t ph·∫©m n√†y."
            )
            return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin v·∫≠t ph·∫©m
        item_data = self.shop_items.get(item_id)
        if not item_data:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ v·∫≠t ph·∫©m c√≥ ID: {item_id}."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra xem v·∫≠t ph·∫©m c√≥ th·ªÉ b√°n kh√¥ng
        if not item_data.get("sellable", True):
            embed = create_error_embed(
                title="‚ùå Kh√¥ng th·ªÉ b√°n",
                description=f"V·∫≠t ph·∫©m {item_data['name']} kh√¥ng th·ªÉ b√°n."
            )
            return await ctx.send(embed=embed)

        # T√≠nh gi√° b√°n (th∆∞·ªùng l√† 50% gi√° mua)
        sell_price = item_data.get("sell_value", item_data.get("value", 100) // 2)
        total_price = sell_price * quantity

        # T·∫°o embed x√°c nh·∫≠n
        embed = create_embed(
            title="üí∞ X√°c Nh·∫≠n B√°n V·∫≠t Ph·∫©m",
            description=f"B·∫°n s·∫Øp b√°n {quantity} {item_data['name']} v·ªõi gi√° {format_number(total_price)} linh th·∫°ch."
        )

        # T·∫°o view x√°c nh·∫≠n
        view = discord.ui.View(timeout=30)

        # N√∫t x√°c nh·∫≠n
        confirm_button = discord.ui.Button(label="X√°c nh·∫≠n", style=discord.ButtonStyle.primary)

        # N√∫t h·ªßy
        cancel_button = discord.ui.Button(label="H·ªßy", style=discord.ButtonStyle.secondary)

        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n
        async def confirm_callback(interaction):
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi g·ªçi l·ªánh kh√¥ng
            if interaction.user.id != ctx.author.id:
                await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ x√°c nh·∫≠n thao t√°c n√†y!", ephemeral=True)
                return

            # Ki·ªÉm tra l·∫°i xem c√≤n v·∫≠t ph·∫©m kh√¥ng
            if not user.has_item(item_id, quantity):
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng c√≤n ƒë·ªß v·∫≠t ph·∫©m ƒë·ªÉ b√°n!",
                    ephemeral=True
                )
                return

            # X√≥a v·∫≠t ph·∫©m kh·ªèi kho ƒë·ªì
            user.remove_item(item_id, quantity)

            # C·ªông linh th·∫°ch
            user.add_spirit_stones(total_price)

            # L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng
            await self.save_user_data(user)

            # T·∫°o embed th√¥ng b√°o
            embed = create_success_embed(
                title="‚úÖ B√°n H√†ng Th√†nh C√¥ng",
                description=f"B·∫°n ƒë√£ b√°n {quantity} {item_data['name']} v√† nh·∫≠n ƒë∆∞·ª£c {format_number(total_price)} linh th·∫°ch."
            )

            # Th√™m th√¥ng tin s·ªë d∆∞ hi·ªán t·∫°i
            embed.add_field(
                name="S·ªë d∆∞ hi·ªán t·∫°i",
                value=f"{format_number(user.resources['spirit_stones'])} linh th·∫°ch",
                inline=False
            )

            await interaction.response.send_message(embed=embed)

        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy
        async def cancel_callback(interaction):
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi g·ªçi l·ªánh kh√¥ng
            if interaction.user.id != ctx.author.id:
                await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ h·ªßy thao t√°c n√†y!", ephemeral=True)
                return

            await interaction.response.send_message("ƒê√£ h·ªßy b√°n v·∫≠t ph·∫©m.", ephemeral=True)

        confirm_button.callback = confirm_callback
        cancel_button.callback = cancel_callback

        view.add_item(confirm_button)
        view.add_item(cancel_button)

        # G·ª≠i embed x√°c nh·∫≠n
        await ctx.send(embed=embed, view=view)


def setup(bot):
    bot.add_cog(ShopCog(bot))
