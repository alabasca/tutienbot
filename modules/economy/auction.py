# modules/economy/auction.py
import discord
from discord.ext import commands
import asyncio
import datetime
import random
import logging
from typing import Dict, List, Optional, Union, Any

from database.mongo_handler import MongoHandler
from database.models.user_model import User
from utils.embed_utils import create_embed, create_success_embed, create_error_embed
from utils.text_utils import format_number, progress_bar

# C·∫•u h√¨nh logging
logger = logging.getLogger("tutien-bot.auction")


class AuctionCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.mongo_handler = MongoHandler()
        self.items_cache = {}
        self.load_items_data()

        # Danh s√°ch ƒë·∫•u gi√° hi·ªán t·∫°i
        self.active_auctions = {}

        # T·∫£i c√°c ƒë·∫•u gi√° t·ª´ database
        self.bot.loop.create_task(self.load_auctions())

        # T·∫°o task ki·ªÉm tra ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c
        self.bot.loop.create_task(self.check_ended_auctions())

    def load_items_data(self):
        """T·∫£i d·ªØ li·ªáu v·∫≠t ph·∫©m t·ª´ file JSON"""
        import json
        import os

        try:
            with open(os.path.join("data", "items.json"), "r", encoding="utf-8") as f:
                self.items_cache = json.load(f)
            logger.info(f"ƒê√£ t·∫£i {len(self.items_cache)} v·∫≠t ph·∫©m t·ª´ file JSON")
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu v·∫≠t ph·∫©m: {e}")

    async def load_auctions(self):
        """T·∫£i c√°c ƒë·∫•u gi√° t·ª´ database"""
        try:
            auctions = await self.mongo_handler.find_async(
                "auctions",
                {"end_time": {"$gt": datetime.datetime.utcnow()}}
            )

            async for auction in auctions:
                self.active_auctions[auction["auction_id"]] = auction

            logger.info(f"ƒê√£ t·∫£i {len(self.active_auctions)} ƒë·∫•u gi√° t·ª´ database")
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i ƒë·∫•u gi√°: {e}")

    async def check_ended_auctions(self):
        """Ki·ªÉm tra v√† x·ª≠ l√Ω c√°c ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c"""
        await self.bot.wait_until_ready()

        while not self.bot.is_closed():
            try:
                now = datetime.datetime.utcnow()
                ended_auctions = []

                # T√¨m c√°c ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c
                for auction_id, auction in self.active_auctions.items():
                    if auction["end_time"] <= now:
                        ended_auctions.append(auction)

                # X·ª≠ l√Ω t·ª´ng ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c
                for auction in ended_auctions:
                    await self.process_ended_auction(auction)
                    self.active_auctions.pop(auction["auction_id"], None)

                # Ki·ªÉm tra m·ªói 60 gi√¢y
                await asyncio.sleep(60)
            except Exception as e:
                logger.error(f"L·ªói khi ki·ªÉm tra ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c: {e}")
                await asyncio.sleep(60)

    async def process_ended_auction(self, auction):
        """X·ª≠ l√Ω ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c"""
        try:
            # Ki·ªÉm tra xem c√≥ ng∆∞·ªùi ƒë·∫∑t gi√° kh√¥ng
            if not auction["bids"]:
                # Kh√¥ng c√≥ ai ƒë·∫∑t gi√°, tr·∫£ l·∫°i v·∫≠t ph·∫©m cho ng∆∞·ªùi b√°n
                seller_id = auction["seller_id"]
                item_id = auction["item_id"]
                quantity = auction["quantity"]

                # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi b√°n
                seller = await self.get_user_data(seller_id)
                if seller:
                    # Tr·∫£ l·∫°i v·∫≠t ph·∫©m
                    seller.add_item(item_id, quantity)
                    await self.save_user_data(seller)

                    # G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi b√°n
                    try:
                        seller_user = self.bot.get_user(seller_id)
                        if seller_user:
                            item_data = self.items_cache.get(item_id, {"name": f"V·∫≠t ph·∫©m #{item_id}"})

                            embed = create_embed(
                                title="üì¶ ƒê·∫•u Gi√° K·∫øt Th√∫c",
                                description=f"ƒê·∫•u gi√° c·ªßa b·∫°n ƒë√£ k·∫øt th√∫c m√† kh√¥ng c√≥ ai ƒë·∫∑t gi√°.\n"
                                            f"V·∫≠t ph·∫©m {item_data['name']} (x{quantity}) ƒë√£ ƒë∆∞·ª£c tr·∫£ l·∫°i v√†o kho ƒë·ªì c·ªßa b·∫°n."
                            )

                            await seller_user.send(embed=embed)
                    except:
                        pass
            else:
                # C√≥ ng∆∞·ªùi ƒë·∫∑t gi√°, x·ª≠ l√Ω k·∫øt qu·∫£
                # S·∫Øp x·∫øp c√°c l∆∞·ª£t ƒë·∫∑t gi√° theo gi√° gi·∫£m d·∫ßn
                sorted_bids = sorted(auction["bids"], key=lambda x: x["amount"], reverse=True)
                highest_bid = sorted_bids[0]

                winner_id = highest_bid["bidder_id"]
                bid_amount = highest_bid["amount"]

                # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi th·∫Øng
                winner = await self.get_user_data(winner_id)
                if winner:
                    # Th√™m v·∫≠t ph·∫©m v√†o kho ƒë·ªì ng∆∞·ªùi th·∫Øng
                    winner.add_item(auction["item_id"], auction["quantity"])
                    await self.save_user_data(winner)

                    # G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi th·∫Øng
                    try:
                        winner_user = self.bot.get_user(winner_id)
                        if winner_user:
                            item_data = self.items_cache.get(auction["item_id"],
                                                             {"name": f"V·∫≠t ph·∫©m #{auction['item_id']}"})

                            embed = create_success_embed(
                                title="üéâ Ch√∫c M·ª´ng! B·∫°n ƒê√£ Th·∫Øng ƒê·∫•u Gi√°",
                                description=f"B·∫°n ƒë√£ th·∫Øng ƒë·∫•u gi√° v·ªõi gi√° {format_number(bid_amount)} linh th·∫°ch.\n"
                                            f"V·∫≠t ph·∫©m {item_data['name']} (x{auction['quantity']}) ƒë√£ ƒë∆∞·ª£c th√™m v√†o kho ƒë·ªì c·ªßa b·∫°n."
                            )

                            await winner_user.send(embed=embed)
                    except:
                        pass

                # Tr·∫£ ti·ªÅn cho ng∆∞·ªùi b√°n
                seller_id = auction["seller_id"]
                seller = await self.get_user_data(seller_id)

                if seller:
                    # T√≠nh ph√≠ giao d·ªãch (5%)
                    fee = int(bid_amount * 0.05)
                    seller_amount = bid_amount - fee

                    # C·ªông ti·ªÅn cho ng∆∞·ªùi b√°n
                    seller.add_spirit_stones(seller_amount)
                    await self.save_user_data(seller)

                    # G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi b√°n
                    try:
                        seller_user = self.bot.get_user(seller_id)
                        if seller_user:
                            item_data = self.items_cache.get(auction["item_id"],
                                                             {"name": f"V·∫≠t ph·∫©m #{auction['item_id']}"})

                            embed = create_success_embed(
                                title="üí∞ ƒê·∫•u Gi√° Th√†nh C√¥ng",
                                description=f"V·∫≠t ph·∫©m {item_data['name']} (x{auction['quantity']}) c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b√°n v·ªõi gi√° {format_number(bid_amount)} linh th·∫°ch.\n"
                                            f"Ph√≠ giao d·ªãch (5%): {format_number(fee)} linh th·∫°ch\n"
                                            f"S·ªë ti·ªÅn b·∫°n nh·∫≠n ƒë∆∞·ª£c: {format_number(seller_amount)} linh th·∫°ch"
                            )

                            await seller_user.send(embed=embed)
                    except:
                        pass

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫•u gi√° trong database
            await self.mongo_handler.update_one_async(
                "auctions",
                {"auction_id": auction["auction_id"]},
                {"$set": {"status": "ended"}}
            )

        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c: {e}")

    async def get_user_data(self, user_id: int) -> Optional[User]:
        """L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ database"""
        user_data = await self.mongo_handler.find_one_async("users", {"user_id": user_id})
        if user_data:
            return User.from_dict(user_data)
        return None

    async def save_user_data(self, user: User) -> bool:
        """L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng v√†o database"""
        result = await self.mongo_handler.update_one_async(
            "users",
            {"user_id": user.user_id},
            {"$set": user.to_dict()},
            upsert=True
        )
        return result.acknowledged

    @commands.group(name="auction", aliases=["daugia"], invoke_without_command=True)
    async def auction(self, ctx, page: int = 1):
        """Xem danh s√°ch ƒë·∫•u gi√° hi·ªán t·∫°i"""
        # Ki·ªÉm tra trang h·ª£p l·ªá
        if page < 1:
            page = 1

        # S·ªë ƒë·∫•u gi√° m·ªói trang
        auctions_per_page = 5

        # L·∫•y danh s√°ch ƒë·∫•u gi√° hi·ªán t·∫°i t·ª´ database
        auctions = await self.mongo_handler.find_async(
            "auctions",
            {"end_time": {"$gt": datetime.datetime.utcnow()}, "status": "active"},
            sort=[("end_time", 1)]  # S·∫Øp x·∫øp theo th·ªùi gian k·∫øt th√∫c tƒÉng d·∫ßn
        )

        # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh list
        auctions_list = await auctions.to_list(length=None)

        # T√≠nh to√°n s·ªë trang
        total_auctions = len(auctions_list)
        total_pages = max(1, (total_auctions + auctions_per_page - 1) // auctions_per_page)

        if page > total_pages:
            page = total_pages

        # T√≠nh ch·ªâ s·ªë b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        start_idx = (page - 1) * auctions_per_page
        end_idx = min(start_idx + auctions_per_page, total_auctions)

        # T·∫°o embed hi·ªÉn th·ªã danh s√°ch ƒë·∫•u gi√°
        embed = create_embed(
            title="üî® Ph√≤ng ƒê·∫•u Gi√°",
            description=f"Danh s√°ch c√°c ƒë·∫•u gi√° ƒëang di·ªÖn ra\nTrang {page}/{total_pages}"
        )

        # Th√™m th√¥ng tin t·ª´ng ƒë·∫•u gi√°
        if not auctions_list:
            embed.add_field(name="Kh√¥ng c√≥ ƒë·∫•u gi√°", value="Hi·ªán t·∫°i kh√¥ng c√≥ ƒë·∫•u gi√° n√†o ƒëang di·ªÖn ra.", inline=False)
        else:
            current_auctions = auctions_list[start_idx:end_idx]

            for i, auction in enumerate(current_auctions, start=start_idx + 1):
                # L·∫•y th√¥ng tin v·∫≠t ph·∫©m
                item_id = auction["item_id"]
                item_data = self.items_cache.get(item_id, {"name": f"V·∫≠t ph·∫©m #{item_id}"})

                # ƒê·ªãnh d·∫°ng t√™n v·∫≠t ph·∫©m theo ƒë·ªô hi·∫øm
                rarity_icons = {
                    "common": "‚ö™",
                    "uncommon": "üü¢",
                    "rare": "üîµ",
                    "epic": "üü£",
                    "legendary": "üü†",
                    "mythic": "üî¥",
                    "divine": "üü°",
                    "artifact": "‚ö°"
                }

                rarity_icon = rarity_icons.get(item_data.get("rarity", "common"), "‚ö™")
                item_name = f"{rarity_icon} {item_data['name']}"

                # L·∫•y th√¥ng tin ng∆∞·ªùi b√°n
                seller_id = auction["seller_id"]
                seller = self.bot.get_user(seller_id)
                seller_name = seller.name if seller else "Kh√¥ng x√°c ƒë·ªãnh"

                # L·∫•y th√¥ng tin gi√° kh·ªüi ƒëi·ªÉm v√† gi√° cao nh·∫•t hi·ªán t·∫°i
                starting_price = auction["starting_price"]
                current_price = starting_price

                if auction["bids"]:
                    # S·∫Øp x·∫øp c√°c l∆∞·ª£t ƒë·∫∑t gi√° theo gi√° gi·∫£m d·∫ßn
                    sorted_bids = sorted(auction["bids"], key=lambda x: x["amount"], reverse=True)
                    current_price = sorted_bids[0]["amount"]

                # T√≠nh th·ªùi gian c√≤n l·∫°i
                end_time = auction["end_time"]
                time_left = end_time - datetime.datetime.utcnow()

                days, remainder = divmod(time_left.total_seconds(), 86400)
                hours, remainder = divmod(remainder, 3600)
                minutes, seconds = divmod(remainder, 60)

                if days > 0:
                    time_str = f"{int(days)} ng√†y {int(hours)} gi·ªù"
                elif hours > 0:
                    time_str = f"{int(hours)} gi·ªù {int(minutes)} ph√∫t"
                else:
                    time_str = f"{int(minutes)} ph√∫t {int(seconds)} gi√¢y"

                # T·∫°o chu·ªói hi·ªÉn th·ªã th√¥ng tin ƒë·∫•u gi√°
                value = f"**V·∫≠t ph·∫©m:** {item_name} (x{auction['quantity']})\n"
                value += f"**Ng∆∞·ªùi b√°n:** {seller_name}\n"
                value += f"**Gi√° kh·ªüi ƒëi·ªÉm:** {format_number(starting_price)} linh th·∫°ch\n"
                value += f"**Gi√° cao nh·∫•t hi·ªán t·∫°i:** {format_number(current_price)} linh th·∫°ch\n"
                value += f"**Th·ªùi gian c√≤n l·∫°i:** {time_str}\n"
                value += f"**ID ƒë·∫•u gi√°:** `{auction['auction_id']}`"

                embed.add_field(
                    name=f"#{i}. {item_name}",
                    value=value,
                    inline=False
                )

        # Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        embed.set_footer(
            text="S·ª≠ d·ª•ng !auction info <ID ƒë·∫•u gi√°> ƒë·ªÉ xem chi ti·∫øt | !auction bid <ID ƒë·∫•u gi√°> <s·ªë ti·ªÅn> ƒë·ªÉ ƒë·∫∑t gi√°")

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @auction.command(name="info")
    async def auction_info(self, ctx, auction_id: str):
        """Xem th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt ƒë·∫•u gi√°"""
        # L·∫•y th√¥ng tin ƒë·∫•u gi√° t·ª´ database
        auction = await self.mongo_handler.find_one_async(
            "auctions",
            {"auction_id": auction_id, "status": "active"}
        )

        if not auction:
            embed = create_error_embed(
                title="‚ùå Kh√¥ng T√¨m Th·∫•y",
                description="Kh√¥ng t√¨m th·∫•y ƒë·∫•u gi√° v·ªõi ID ƒë√£ cung c·∫•p ho·∫∑c ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c."
            )
            return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin v·∫≠t ph·∫©m
        item_id = auction["item_id"]
        item_data = self.items_cache.get(item_id, {"name": f"V·∫≠t ph·∫©m #{item_id}"})

        # ƒê·ªãnh d·∫°ng t√™n v·∫≠t ph·∫©m theo ƒë·ªô hi·∫øm
        rarity_icons = {
            "common": "‚ö™",
            "uncommon": "üü¢",
            "rare": "üîµ",
            "epic": "üü£",
            "legendary": "üü†",
            "mythic": "üî¥",
            "divine": "üü°",
            "artifact": "‚ö°"
        }

        rarity_colors = {
            "common": discord.Color.light_grey(),
            "uncommon": discord.Color.green(),
            "rare": discord.Color.blue(),
            "epic": discord.Color.purple(),
            "legendary": discord.Color.orange(),
            "mythic": discord.Color.red(),
            "divine": discord.Color.gold(),
            "artifact": discord.Color(0x738ADB)  # M√†u ƒë·∫∑c bi·ªát cho artifact
        }

        rarity = item_data.get("rarity", "common")
        rarity_icon = rarity_icons.get(rarity, "‚ö™")
        embed_color = rarity_colors.get(rarity, discord.Color.default())

        # L·∫•y th√¥ng tin ng∆∞·ªùi b√°n
        seller_id = auction["seller_id"]
        seller = self.bot.get_user(seller_id)
        seller_name = seller.name if seller else "Kh√¥ng x√°c ƒë·ªãnh"

        # L·∫•y th√¥ng tin gi√° kh·ªüi ƒëi·ªÉm v√† gi√° cao nh·∫•t hi·ªán t·∫°i
        starting_price = auction["starting_price"]
        current_price = starting_price
        highest_bidder = "Ch∆∞a c√≥"

        if auction["bids"]:
            # S·∫Øp x·∫øp c√°c l∆∞·ª£t ƒë·∫∑t gi√° theo gi√° gi·∫£m d·∫ßn
            sorted_bids = sorted(auction["bids"], key=lambda x: x["amount"], reverse=True)
            highest_bid = sorted_bids[0]
            current_price = highest_bid["amount"]

            # L·∫•y th√¥ng tin ng∆∞·ªùi ƒë·∫∑t gi√° cao nh·∫•t
            bidder_id = highest_bid["bidder_id"]
            bidder = self.bot.get_user(bidder_id)
            highest_bidder = bidder.name if bidder else f"Ng∆∞·ªùi d√πng #{bidder_id}"

        # T√≠nh th·ªùi gian c√≤n l·∫°i
        end_time = auction["end_time"]
        time_left = end_time - datetime.datetime.utcnow()

        days, remainder = divmod(time_left.total_seconds(), 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)

        if days > 0:
            time_str = f"{int(days)} ng√†y {int(hours)} gi·ªù {int(minutes)} ph√∫t {int(seconds)} gi√¢y"
        elif hours > 0:
            time_str = f"{int(hours)} gi·ªù {int(minutes)} ph√∫t {int(seconds)} gi√¢y"
        else:
            time_str = f"{int(minutes)} ph√∫t {int(seconds)} gi√¢y"

        # T·∫°o embed hi·ªÉn th·ªã th√¥ng tin ƒë·∫•u gi√°
        embed = create_embed(
            title=f"üî® ƒê·∫•u Gi√°: {rarity_icon} {item_data['name']}",
            description=item_data.get("description", "Kh√¥ng c√≥ m√¥ t·∫£"),
            color=embed_color
        )

        # Th√™m th√¥ng tin c∆° b·∫£n
        embed.add_field(name="S·ªë l∆∞·ª£ng", value=str(auction["quantity"]), inline=True)
        embed.add_field(name="Ng∆∞·ªùi b√°n", value=seller_name, inline=True)
        embed.add_field(name="ID ƒë·∫•u gi√°", value=auction_id, inline=True)

        # Th√™m th√¥ng tin gi√°
        embed.add_field(name="Gi√° kh·ªüi ƒëi·ªÉm", value=f"{format_number(starting_price)} linh th·∫°ch", inline=True)
        embed.add_field(name="Gi√° cao nh·∫•t hi·ªán t·∫°i", value=f"{format_number(current_price)} linh th·∫°ch", inline=True)
        embed.add_field(name="Ng∆∞·ªùi ƒë·∫∑t gi√° cao nh·∫•t", value=highest_bidder, inline=True)

        # Th√™m th√¥ng tin th·ªùi gian
        embed.add_field(name="Th·ªùi gian c√≤n l·∫°i", value=time_str, inline=True)
        embed.add_field(name="K·∫øt th√∫c v√†o", value=end_time.strftime("%d/%m/%Y %H:%M:%S UTC"), inline=True)

        # Th√™m th√¥ng tin v·∫≠t ph·∫©m
        if "required_level" in item_data and item_data["required_level"] > 0:
            embed.add_field(name="Y√™u c·∫ßu c·∫•p ƒë·ªô", value=str(item_data["required_level"]), inline=True)

        if "required_realm" in item_data and item_data["required_realm"]:
            embed.add_field(name="Y√™u c·∫ßu c·∫£nh gi·ªõi", value=item_data["required_realm"], inline=True)

        # Th√™m th√¥ng tin ƒë·∫∑c bi·ªát theo lo·∫°i v·∫≠t ph·∫©m
        item_type = item_data.get("item_type", "")

        if item_type == "equipment":
            # Hi·ªÉn th·ªã th√¥ng tin trang b·ªã
            embed.add_field(name="Lo·∫°i trang b·ªã", value=self.translate_equipment_slot(item_data.get("slot", "")),
                            inline=True)

            # Hi·ªÉn th·ªã ch·ªâ s·ªë
            stats_text = ""
            for stat, value in item_data.get("stats", {}).items():
                if value != 0:
                    stats_text += f"‚Ä¢ {self.translate_stat(stat)}: +{value}\n"

            if stats_text:
                embed.add_field(name="Ch·ªâ s·ªë", value=stats_text, inline=False)

        # Th√™m l·ªãch s·ª≠ ƒë·∫∑t gi√°
        if auction["bids"]:
            # S·∫Øp x·∫øp c√°c l∆∞·ª£t ƒë·∫∑t gi√° theo th·ªùi gian gi·∫£m d·∫ßn
            sorted_bids = sorted(auction["bids"], key=lambda x: x["time"], reverse=True)

            bid_history = ""
            for i, bid in enumerate(sorted_bids[:5], 1):
                bidder_id = bid["bidder_id"]
                bidder = self.bot.get_user(bidder_id)
                bidder_name = bidder.name if bidder else f"Ng∆∞·ªùi d√πng #{bidder_id}"

                bid_time = bid["time"].strftime("%d/%m/%Y %H:%M:%S")
                bid_history += f"{i}. **{bidder_name}**: {format_number(bid['amount'])} linh th·∫°ch ({bid_time})\n"

            if len(sorted_bids) > 5:
                bid_history += f"... v√† {len(sorted_bids) - 5} l∆∞·ª£t ƒë·∫∑t gi√° kh√°c"

            embed.add_field(name="L·ªãch s·ª≠ ƒë·∫∑t gi√°", value=bid_history, inline=False)

        # Th√™m h√¨nh ·∫£nh n·∫øu c√≥
        if "image_url" in item_data and item_data["image_url"]:
            embed.set_thumbnail(url=item_data["image_url"])

        # Th√™m h∆∞·ªõng d·∫´n ƒë·∫∑t gi√°
        embed.set_footer(text=f"S·ª≠ d·ª•ng !auction bid {auction_id} <s·ªë ti·ªÅn> ƒë·ªÉ ƒë·∫∑t gi√°")

        # G·ª≠i embed
        await ctx.send(embed=embed)

    @auction.command(name="bid")
    async def auction_bid(self, ctx, auction_id: str, amount: int):
        """ƒê·∫∑t gi√° cho m·ªôt ƒë·∫•u gi√°"""
        # Ki·ªÉm tra s·ªë ti·ªÅn
        if amount <= 0:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0."
            )
            return await ctx.send(embed=embed)

        # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng
        user = await self.get_user_data(ctx.author.id)
        if not user:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu ti√™n. H√£y s·ª≠ d·ª•ng l·ªánh `!start` ƒë·ªÉ b·∫Øt ƒë·∫ßu."
            )
            return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin ƒë·∫•u gi√° t·ª´ database
        auction = await self.mongo_handler.find_one_async(
            "auctions",
            {"auction_id": auction_id, "status": "active"}
        )

        if not auction:
            embed = create_error_embed(
                title="‚ùå Kh√¥ng T√¨m Th·∫•y",
                description="Kh√¥ng t√¨m th·∫•y ƒë·∫•u gi√° v·ªõi ID ƒë√£ cung c·∫•p ho·∫∑c ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi b√°n kh√¥ng
        if auction["seller_id"] == ctx.author.id:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="B·∫°n kh√¥ng th·ªÉ ƒë·∫∑t gi√° cho ƒë·∫•u gi√° c·ªßa ch√≠nh m√¨nh."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra xem ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c ch∆∞a
        if auction["end_time"] <= datetime.datetime.utcnow():
            embed = create_error_embed(
                title="‚ùå ƒê·∫•u Gi√° ƒê√£ K·∫øt Th√∫c",
                description="ƒê·∫•u gi√° n√†y ƒë√£ k·∫øt th√∫c."
            )
            return await ctx.send(embed=embed)

        # L·∫•y gi√° cao nh·∫•t hi·ªán t·∫°i
        current_price = auction["starting_price"]

        if auction["bids"]:
            # S·∫Øp x·∫øp c√°c l∆∞·ª£t ƒë·∫∑t gi√° theo gi√° gi·∫£m d·∫ßn
            sorted_bids = sorted(auction["bids"], key=lambda x: x["amount"], reverse=True)
            current_price = sorted_bids[0]["amount"]

        # Ki·ªÉm tra xem gi√° ƒë·∫∑t c√≥ cao h∆°n gi√° hi·ªán t·∫°i kh√¥ng
        min_bid = current_price + max(1, int(current_price * 0.05))  # T·ªëi thi·ªÉu cao h∆°n 5%

        if amount < min_bid:
            embed = create_error_embed(
                title="‚ùå Gi√° ƒê·∫∑t Qu√° Th·∫•p",
                description=f"Gi√° ƒë·∫∑t ph·∫£i cao h∆°n gi√° hi·ªán t·∫°i √≠t nh·∫•t 5%.\nGi√° t·ªëi thi·ªÉu: {format_number(min_bid)} linh th·∫°ch"
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒë·ªß linh th·∫°ch kh√¥ng
        if user.resources["spirit_stones"] < amount:
            embed = create_error_embed(
                title="‚ùå Kh√¥ng ƒê·ªß Linh Th·∫°ch",
                description=f"B·∫°n kh√¥ng c√≥ ƒë·ªß linh th·∫°ch. Hi·ªán t·∫°i b·∫°n c√≥ {format_number(user.resources['spirit_stones'])} linh th·∫°ch."
            )
            return await ctx.send(embed=embed)

        # T·∫°o embed x√°c nh·∫≠n
        item_id = auction["item_id"]
        item_data = self.items_cache.get(item_id, {"name": f"V·∫≠t ph·∫©m #{item_id}"})

        embed = create_embed(
            title="üî® X√°c Nh·∫≠n ƒê·∫∑t Gi√°",
            description=f"B·∫°n s·∫Øp ƒë·∫∑t gi√° {format_number(amount)} linh th·∫°ch cho {item_data['name']} (x{auction['quantity']}).\n\n"
                        f"**L∆∞u √Ω:** Linh th·∫°ch s·∫Ω b·ªã kh√≥a cho ƒë·∫øn khi ƒë·∫•u gi√° k·∫øt th√∫c ho·∫∑c c√≥ ng∆∞·ªùi ƒë·∫∑t gi√° cao h∆°n."
        )

        # T·∫°o view x√°c nh·∫≠n
        view = discord.ui.View(timeout=30)

        # N√∫t x√°c nh·∫≠n
        confirm_button = discord.ui.Button(label="X√°c nh·∫≠n", style=discord.ButtonStyle.primary)

        # N√∫t h·ªßy
        cancel_button = discord.ui.Button(label="H·ªßy", style=discord.ButtonStyle.secondary)

        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n
        async def confirm_callback(interaction):
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi g·ªçi l·ªánh kh√¥ng
            if interaction.user.id != ctx.author.id:
                await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ x√°c nh·∫≠n thao t√°c n√†y!", ephemeral=True)
                return

            # Ki·ªÉm tra l·∫°i xem c√≥ ƒë·ªß linh th·∫°ch kh√¥ng
            if user.resources["spirit_stones"] < amount:
                await interaction.response.send_message(
                    "Kh√¥ng ƒë·ªß linh th·∫°ch ƒë·ªÉ ƒë·∫∑t gi√°!",
                    ephemeral=True
                )
                return

            # Ki·ªÉm tra l·∫°i xem ƒë·∫•u gi√° c√≤n ho·∫°t ƒë·ªông kh√¥ng
            current_auction = await self.mongo_handler.find_one_async(
                "auctions",
                {"auction_id": auction_id, "status": "active"}
            )

            if not current_auction:
                await interaction.response.send_message(
                    "ƒê·∫•u gi√° n√†y ƒë√£ k·∫øt th√∫c ho·∫∑c kh√¥ng c√≤n t·ªìn t·∫°i!",
                    ephemeral=True
                )
                return

            # Ki·ªÉm tra l·∫°i gi√° cao nh·∫•t hi·ªán t·∫°i
            current_price = current_auction["starting_price"]

            if current_auction["bids"]:
                # S·∫Øp x·∫øp c√°c l∆∞·ª£t ƒë·∫∑t gi√° theo gi√° gi·∫£m d·∫ßn
                sorted_bids = sorted(current_auction["bids"], key=lambda x: x["amount"], reverse=True)
                current_price = sorted_bids[0]["amount"]

            # Ki·ªÉm tra l·∫°i xem gi√° ƒë·∫∑t c√≥ cao h∆°n gi√° hi·ªán t·∫°i kh√¥ng
            min_bid = current_price + max(1, int(current_price * 0.05))  # T·ªëi thi·ªÉu cao h∆°n 5%

            if amount < min_bid:
                await interaction.response.send_message(
                    f"Gi√° ƒë·∫∑t qu√° th·∫•p! Gi√° t·ªëi thi·ªÉu hi·ªán t·∫°i l√† {format_number(min_bid)} linh th·∫°ch.",
                    ephemeral=True
                )
                return

            # Ho√†n tr·∫£ linh th·∫°ch cho ng∆∞·ªùi ƒë·∫∑t gi√° cao nh·∫•t tr∆∞·ªõc ƒë√≥
            if current_auction["bids"]:
                # S·∫Øp x·∫øp c√°c l∆∞·ª£t ƒë·∫∑t gi√° theo gi√° gi·∫£m d·∫ßn
                sorted_bids = sorted(current_auction["bids"], key=lambda x: x["amount"], reverse=True)
                highest_bid = sorted_bids[0]

                # N·∫øu ng∆∞·ªùi ƒë·∫∑t gi√° cao nh·∫•t kh√¥ng ph·∫£i l√† ng∆∞·ªùi hi·ªán t·∫°i
                if highest_bid["bidder_id"] != ctx.author.id:
                    # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi ƒë·∫∑t gi√° cao nh·∫•t tr∆∞·ªõc ƒë√≥
                    previous_bidder = await self.get_user_data(highest_bid["bidder_id"])
                    if previous_bidder:
                        # Ho√†n tr·∫£ linh th·∫°ch
                        previous_bidder.add_spirit_stones(highest_bid["amount"])
                        await self.save_user_data(previous_bidder)

                        # G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi ƒë·∫∑t gi√° tr∆∞·ªõc ƒë√≥
                        try:
                            previous_user = self.bot.get_user(highest_bid["bidder_id"])
                            if previous_user:
                                embed = create_embed(
                                    title="üì¢ ƒê√£ B·ªã V∆∞·ª£t Gi√°",
                                    description=f"B·∫°n ƒë√£ b·ªã v∆∞·ª£t gi√° trong ƒë·∫•u gi√° {item_data['name']}.\n"
                                                f"Linh th·∫°ch ƒë√£ ƒë∆∞·ª£c ho√†n tr·∫£: {format_number(highest_bid['amount'])} linh th·∫°ch."
                                )

                                await previous_user.send(embed=embed)
                        except:
                            pass

            # Tr·ª´ linh th·∫°ch c·ªßa ng∆∞·ªùi ƒë·∫∑t gi√° m·ªõi
            user.resources["spirit_stones"] -= amount
            await self.save_user_data(user)

            # Th√™m l∆∞·ª£t ƒë·∫∑t gi√° m·ªõi
            new_bid = {
                "bidder_id": ctx.author.id,
                "amount": amount,
                "time": datetime.datetime.utcnow()
            }

            # C·∫≠p nh·∫≠t ƒë·∫•u gi√° trong database
            await self.mongo_handler.update_one_async(
                "auctions",
                {"auction_id": auction_id},
                {"$push": {"bids": new_bid}}
            )

            # C·∫≠p nh·∫≠t cache
            if auction_id in self.active_auctions:
                self.active_auctions[auction_id]["bids"].append(new_bid)

            # T·∫°o embed th√¥ng b√°o
            embed = create_success_embed(
                title="‚úÖ ƒê·∫∑t Gi√° Th√†nh C√¥ng",
                description=f"B·∫°n ƒë√£ ƒë·∫∑t gi√° {format_number(amount)} linh th·∫°ch cho {item_data['name']} (x{auction['quantity']})."
            )

            # Th√™m th√¥ng tin s·ªë d∆∞ c√≤n l·∫°i
            embed.add_field(
                name="S·ªë d∆∞ c√≤n l·∫°i",
                value=f"{format_number(user.resources['spirit_stones'])} linh th·∫°ch",
                inline=False
            )

            # Th√™m th√¥ng tin th·ªùi gian k·∫øt th√∫c
            end_time = auction["end_time"]
            time_left = end_time - datetime.datetime.utcnow()

            days, remainder = divmod(time_left.total_seconds(), 86400)
            hours, remainder = divmod(remainder, 3600)
            minutes, seconds = divmod(remainder, 60)

            if days > 0:
                time_str = f"{int(days)} ng√†y {int(hours)} gi·ªù"
            elif hours > 0:
                time_str = f"{int(hours)} gi·ªù {int(minutes)} ph√∫t"
            else:
                time_str = f"{int(minutes)} ph√∫t {int(seconds)} gi√¢y"

            embed.add_field(
                name="Th·ªùi gian c√≤n l·∫°i",
                value=time_str,
                inline=False
            )

            await interaction.response.send_message(embed=embed)

        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy
        async def cancel_callback(interaction):
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi g·ªçi l·ªánh kh√¥ng
            if interaction.user.id != ctx.author.id:
                await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ h·ªßy thao t√°c n√†y!", ephemeral=True)
                return

            await interaction.response.send_message("ƒê√£ h·ªßy ƒë·∫∑t gi√°.", ephemeral=True)

        confirm_button.callback = confirm_callback
        cancel_button.callback = cancel_callback

        view.add_item(confirm_button)
        view.add_item(cancel_button)

        # G·ª≠i embed x√°c nh·∫≠n
        await ctx.send(embed=embed, view=view)

    @auction.command(name="create", aliases=["new", "tao"])
    async def auction_create(self, ctx, item_index: int, quantity: int = 1, starting_price: int = None,
                             duration: int = 24):
        """T·∫°o m·ªôt ƒë·∫•u gi√° m·ªõi"""
        # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng
        user = await self.get_user_data(ctx.author.id)
        if not user:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu ti√™n. H√£y s·ª≠ d·ª•ng l·ªánh `!start` ƒë·ªÉ b·∫Øt ƒë·∫ßu."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra s·ªë l∆∞·ª£ng
        if quantity <= 0:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra th·ªùi gian
        if duration < 1 or duration > 168:  # 1 gi·ªù ƒë·∫øn 7 ng√†y
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Th·ªùi gian ƒë·∫•u gi√° ph·∫£i t·ª´ 1 ƒë·∫øn 168 gi·ªù (7 ng√†y)."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra ch·ªâ s·ªë v·∫≠t ph·∫©m h·ª£p l·ªá
        if item_index < 1 or item_index > len(user.inventory["items"]):
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"Ch·ªâ s·ªë v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá. Ph·∫£i t·ª´ 1 ƒë·∫øn {len(user.inventory['items'])}."
            )
            return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin v·∫≠t ph·∫©m
        item_entry = user.inventory["items"][item_index - 1]
        item_id = item_entry["item_id"]
        max_quantity = item_entry["quantity"]

        # Ki·ªÉm tra s·ªë l∆∞·ª£ng
        if quantity > max_quantity:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"B·∫°n ch·ªâ c√≥ {max_quantity} v·∫≠t ph·∫©m n√†y."
            )
            return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin v·∫≠t ph·∫©m
        item_data = self.items_cache.get(item_id)
        if not item_data:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description=f"Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ v·∫≠t ph·∫©m c√≥ ID: {item_id}."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra xem v·∫≠t ph·∫©m c√≥ th·ªÉ ƒë·∫•u gi√° kh√¥ng
        if not item_data.get("tradeable", True):
            embed = create_error_embed(
                title="‚ùå Kh√¥ng th·ªÉ ƒë·∫•u gi√°",
                description=f"V·∫≠t ph·∫©m {item_data['name']} kh√¥ng th·ªÉ giao d·ªãch ho·∫∑c ƒë·∫•u gi√°."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra xem v·∫≠t ph·∫©m c√≥ b·ªã kh√≥a kh√¥ng
        if item_entry.get("bound", False):
            embed = create_error_embed(
                title="‚ùå V·∫≠t ph·∫©m b·ªã kh√≥a",
                description=f"V·∫≠t ph·∫©m {item_data['name']} ƒë√£ b·ªã kh√≥a v√† kh√¥ng th·ªÉ ƒë·∫•u gi√°."
            )
            return await ctx.send(embed=embed)

        # N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh gi√° kh·ªüi ƒëi·ªÉm, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
        if starting_price is None:
            starting_price = item_data.get("value", 100) * quantity

        # Ki·ªÉm tra gi√° kh·ªüi ƒëi·ªÉm
        if starting_price <= 0:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Gi√° kh·ªüi ƒëi·ªÉm ph·∫£i l·ªõn h∆°n 0."
            )
            return await ctx.send(embed=embed)

        # T√≠nh ph√≠ ƒëƒÉng k√Ω ƒë·∫•u gi√° (1% gi√° kh·ªüi ƒëi·ªÉm, t·ªëi thi·ªÉu 10 linh th·∫°ch)
        listing_fee = max(10, int(starting_price * 0.01))

        # Ki·ªÉm tra xem c√≥ ƒë·ªß linh th·∫°ch ƒë·ªÉ tr·∫£ ph√≠ kh√¥ng
        if user.resources["spirit_stones"] < listing_fee:
            embed = create_error_embed(
                title="‚ùå Kh√¥ng ƒë·ªß linh th·∫°ch",
                description=f"B·∫°n c·∫ßn {format_number(listing_fee)} linh th·∫°ch ƒë·ªÉ ƒëƒÉng k√Ω ƒë·∫•u gi√°."
            )
            return await ctx.send(embed=embed)

        # T·∫°o embed x√°c nh·∫≠n
        embed = create_embed(
            title="üî® X√°c Nh·∫≠n T·∫°o ƒê·∫•u Gi√°",
            description=f"B·∫°n s·∫Øp t·∫°o ƒë·∫•u gi√° cho {item_data['name']} (x{quantity}) v·ªõi gi√° kh·ªüi ƒëi·ªÉm {format_number(starting_price)} linh th·∫°ch.\n\n"
                        f"**Th·ªùi gian:** {duration} gi·ªù\n"
                        f"**Ph√≠ ƒëƒÉng k√Ω:** {format_number(listing_fee)} linh th·∫°ch"
        )

        # T·∫°o view x√°c nh·∫≠n
        view = discord.ui.View(timeout=30)

        # N√∫t x√°c nh·∫≠n
        confirm_button = discord.ui.Button(label="X√°c nh·∫≠n", style=discord.ButtonStyle.primary)

        # N√∫t h·ªßy
        cancel_button = discord.ui.Button(label="H·ªßy", style=discord.ButtonStyle.secondary)

        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n
        async def confirm_callback(interaction):
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi g·ªçi l·ªánh kh√¥ng
            if interaction.user.id != ctx.author.id:
                await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ x√°c nh·∫≠n thao t√°c n√†y!", ephemeral=True)
                return

            # Ki·ªÉm tra l·∫°i xem c√≥ ƒë·ªß linh th·∫°ch ƒë·ªÉ tr·∫£ ph√≠ kh√¥ng
            if user.resources["spirit_stones"] < listing_fee:
                await interaction.response.send_message(
                    "Kh√¥ng ƒë·ªß linh th·∫°ch ƒë·ªÉ ƒëƒÉng k√Ω ƒë·∫•u gi√°!",
                    ephemeral=True
                )
                return

            # Ki·ªÉm tra l·∫°i xem c√≤n v·∫≠t ph·∫©m kh√¥ng
            if not user.has_item(item_id, quantity):
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng c√≤n ƒë·ªß v·∫≠t ph·∫©m ƒë·ªÉ ƒë·∫•u gi√°!",
                    ephemeral=True
                )
                return

            # Tr·ª´ ph√≠ ƒëƒÉng k√Ω
            user.spend_spirit_stones(listing_fee)

            # X√≥a v·∫≠t ph·∫©m kh·ªèi kho ƒë·ªì
            user.remove_item(item_id, quantity)

            # L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng
            await self.save_user_data(user)

            # T·∫°o ID ƒë·∫•u gi√°
            import uuid
            auction_id = str(uuid.uuid4())[:8]

            # T√≠nh th·ªùi gian k·∫øt th√∫c
            end_time = datetime.datetime.utcnow() + datetime.timedelta(hours=duration)

            # T·∫°o ƒë·∫•u gi√° m·ªõi
            new_auction = {
                "auction_id": auction_id,
                "seller_id": ctx.author.id,
                "item_id": item_id,
                "quantity": quantity,
                "starting_price": starting_price,
                "current_price": starting_price,
                "bids": [],
                "created_at": datetime.datetime.utcnow(),
                "end_time": end_time,
                "status": "active"
            }

            # L∆∞u ƒë·∫•u gi√° v√†o database
            await self.mongo_handler.insert_one_async("auctions", new_auction)

            # Th√™m v√†o cache
            self.active_auctions[auction_id] = new_auction

            # T·∫°o embed th√¥ng b√°o
            embed = create_success_embed(
                title="‚úÖ T·∫°o ƒê·∫•u Gi√° Th√†nh C√¥ng",
                description=f"ƒê√£ t·∫°o ƒë·∫•u gi√° cho {item_data['name']} (x{quantity}) v·ªõi gi√° kh·ªüi ƒëi·ªÉm {format_number(starting_price)} linh th·∫°ch."
            )

            # Th√™m th√¥ng tin
            embed.add_field(
                name="ID ƒë·∫•u gi√°",
                value=auction_id,
                inline=True
            )

            embed.add_field(
                name="Th·ªùi gian k·∫øt th√∫c",
                value=end_time.strftime("%d/%m/%Y %H:%M:%S UTC"),
                inline=True
            )

            embed.add_field(
                name="Ph√≠ ƒë√£ tr·∫£",
                value=f"{format_number(listing_fee)} linh th·∫°ch",
                inline=True
            )

            # Th√™m th√¥ng tin s·ªë d∆∞ c√≤n l·∫°i
            embed.add_field(
                name="S·ªë d∆∞ c√≤n l·∫°i",
                value=f"{format_number(user.resources['spirit_stones'])} linh th·∫°ch",
                inline=False
            )

            await interaction.response.send_message(embed=embed)

        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy
        async def cancel_callback(interaction):
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi g·ªçi l·ªánh kh√¥ng
            if interaction.user.id != ctx.author.id:
                await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ h·ªßy thao t√°c n√†y!", ephemeral=True)
                return

            await interaction.response.send_message("ƒê√£ h·ªßy t·∫°o ƒë·∫•u gi√°.", ephemeral=True)

        confirm_button.callback = confirm_callback
        cancel_button.callback = cancel_callback

        view.add_item(confirm_button)
        view.add_item(cancel_button)

        # G·ª≠i embed x√°c nh·∫≠n
        await ctx.send(embed=embed, view=view)

    @auction.command(name="cancel", aliases=["huy"])
    async def auction_cancel(self, ctx, auction_id: str):
        """H·ªßy m·ªôt ƒë·∫•u gi√° ƒëang di·ªÖn ra"""
        # L·∫•y th√¥ng tin ƒë·∫•u gi√° t·ª´ database
        auction = await self.mongo_handler.find_one_async(
            "auctions",
            {"auction_id": auction_id, "status": "active"}
        )

        if not auction:
            embed = create_error_embed(
                title="‚ùå Kh√¥ng T√¨m Th·∫•y",
                description="Kh√¥ng t√¨m th·∫•y ƒë·∫•u gi√° v·ªõi ID ƒë√£ cung c·∫•p ho·∫∑c ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi b√°n kh√¥ng
        if auction["seller_id"] != ctx.author.id:
            embed = create_error_embed(
                title="‚ùå Kh√¥ng C√≥ Quy·ªÅn",
                description="B·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi t·∫°o ƒë·∫•u gi√° n√†y."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra xem ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t gi√° ch∆∞a
        if auction["bids"]:
            embed = create_error_embed(
                title="‚ùå Kh√¥ng Th·ªÉ H·ªßy",
                description="Kh√¥ng th·ªÉ h·ªßy ƒë·∫•u gi√° ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t gi√°."
            )
            return await ctx.send(embed=embed)

        # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng
        user = await self.get_user_data(ctx.author.id)
        if not user:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng."
            )
            return await ctx.send(embed=embed)

        # L·∫•y th√¥ng tin v·∫≠t ph·∫©m
        item_id = auction["item_id"]
        quantity = auction["quantity"]
        item_data = self.items_cache.get(item_id, {"name": f"V·∫≠t ph·∫©m #{item_id}"})

        # T·∫°o embed x√°c nh·∫≠n
        embed = create_embed(
            title="üî® X√°c Nh·∫≠n H·ªßy ƒê·∫•u Gi√°",
            description=f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë·∫•u gi√° {item_data['name']} (x{quantity}) kh√¥ng?\n\n"
                        f"**L∆∞u √Ω:** Ph√≠ ƒëƒÉng k√Ω s·∫Ω kh√¥ng ƒë∆∞·ª£c ho√†n l·∫°i."
        )

        # T·∫°o view x√°c nh·∫≠n
        view = discord.ui.View(timeout=30)

        # N√∫t x√°c nh·∫≠n
        confirm_button = discord.ui.Button(label="X√°c nh·∫≠n", style=discord.ButtonStyle.danger)

        # N√∫t h·ªßy
        cancel_button = discord.ui.Button(label="H·ªßy", style=discord.ButtonStyle.secondary)

        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n
        async def confirm_callback(interaction):
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi g·ªçi l·ªánh kh√¥ng
            if interaction.user.id != ctx.author.id:
                await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ x√°c nh·∫≠n thao t√°c n√†y!", ephemeral=True)
                return

            # Ki·ªÉm tra l·∫°i xem ƒë·∫•u gi√° c√≤n t·ªìn t·∫°i kh√¥ng
            current_auction = await self.mongo_handler.find_one_async(
                "auctions",
                {"auction_id": auction_id, "status": "active"}
            )

            if not current_auction:
                await interaction.response.send_message(
                    "ƒê·∫•u gi√° n√†y ƒë√£ k·∫øt th√∫c ho·∫∑c kh√¥ng c√≤n t·ªìn t·∫°i!",
                    ephemeral=True
                )
                return

            # Ki·ªÉm tra l·∫°i xem ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t gi√° ch∆∞a
            if current_auction["bids"]:
                await interaction.response.send_message(
                    "Kh√¥ng th·ªÉ h·ªßy ƒë·∫•u gi√° ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t gi√°!",
                    ephemeral=True
                )
                return

            # Tr·∫£ l·∫°i v·∫≠t ph·∫©m cho ng∆∞·ªùi b√°n
            user.add_item(item_id, quantity)
            await self.save_user_data(user)

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫•u gi√° trong database
            await self.mongo_handler.update_one_async(
                "auctions",
                {"auction_id": auction_id},
                {"$set": {"status": "cancelled"}}
            )

            # X√≥a kh·ªèi cache
            if auction_id in self.active_auctions:
                self.active_auctions.pop(auction_id)

            # T·∫°o embed th√¥ng b√°o
            embed = create_success_embed(
                title="‚úÖ ƒê√£ H·ªßy ƒê·∫•u Gi√°",
                description=f"ƒê√£ h·ªßy ƒë·∫•u gi√° {item_data['name']} (x{quantity}).\n"
                            f"V·∫≠t ph·∫©m ƒë√£ ƒë∆∞·ª£c tr·∫£ l·∫°i v√†o kho ƒë·ªì c·ªßa b·∫°n."
            )

            await interaction.response.send_message(embed=embed)

        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy
        async def cancel_callback(interaction):
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi g·ªçi l·ªánh kh√¥ng
            if interaction.user.id != ctx.author.id:
                await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ h·ªßy thao t√°c n√†y!", ephemeral=True)
                return

            await interaction.response.send_message("ƒê√£ h·ªßy thao t√°c.", ephemeral=True)

        confirm_button.callback = confirm_callback
        cancel_button.callback = cancel_callback

        view.add_item(confirm_button)
        view.add_item(cancel_button)

        # G·ª≠i embed x√°c nh·∫≠n
        await ctx.send(embed=embed, view=view)

    @auction.command(name="history", aliases=["lichsu"])
    async def auction_history(self, ctx, page: int = 1):
        """Xem l·ªãch s·ª≠ ƒë·∫•u gi√° c·ªßa b·∫°n"""
        # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng
        user = await self.get_user_data(ctx.author.id)
        if not user:
            embed = create_error_embed(
                title="‚ùå L·ªói",
                description="B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu ti√™n. H√£y s·ª≠ d·ª•ng l·ªánh `!start` ƒë·ªÉ b·∫Øt ƒë·∫ßu."
            )
            return await ctx.send(embed=embed)

        # Ki·ªÉm tra trang h·ª£p l·ªá
        if page < 1:
            page = 1

        # S·ªë ƒë·∫•u gi√° m·ªói trang
        auctions_per_page = 5

        # L·∫•y danh s√°ch ƒë·∫•u gi√° t·ª´ database
        auctions = await self.mongo_handler.find_async(
            "auctions",
            {"$or": [
                {"seller_id": ctx.author.id},
                {"bids.bidder_id": ctx.author.id}
            ]},
            sort=[("end_time", -1)]  # S·∫Øp x·∫øp theo th·ªùi gian k·∫øt th√∫c gi·∫£m d·∫ßn
        )

        # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh list
        auctions_list = await auctions.to_list(length=None)

        # T√≠nh to√°n s·ªë trang
        total_auctions = len(auctions_list)
        total_pages = max(1, (total_auctions + auctions_per_page - 1) // auctions_per_page)

        if page > total_pages:
            page = total_pages

        # T√≠nh ch·ªâ s·ªë b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        start_idx = (page - 1) * auctions_per_page
        end_idx = min(start_idx + auctions_per_page, total_auctions)

        # T·∫°o embed hi·ªÉn th·ªã l·ªãch s·ª≠ ƒë·∫•u gi√°
        embed = create_embed(
            title="üìú L·ªãch S·ª≠ ƒê·∫•u Gi√°",
            description=f"L·ªãch s·ª≠ ƒë·∫•u gi√° c·ªßa b·∫°n\nTrang {page}/{total_pages}"
        )

        # Th√™m th√¥ng tin t·ª´ng ƒë·∫•u gi√°
        if not auctions_list:
            embed.add_field(name="Kh√¥ng c√≥ d·ªØ li·ªáu", value="B·∫°n ch∆∞a tham gia ƒë·∫•u gi√° n√†o.", inline=False)
        else:
            current_auctions = auctions_list[start_idx:end_idx]

            for i, auction in enumerate(current_auctions, start=start_idx + 1):
                # L·∫•y th√¥ng tin v·∫≠t ph·∫©m
                item_id = auction["item_id"]
                item_data = self.items_cache.get(item_id, {"name": f"V·∫≠t ph·∫©m #{item_id}"})

                # ƒê·ªãnh d·∫°ng t√™n v·∫≠t ph·∫©m theo ƒë·ªô hi·∫øm
                rarity_icons = {
                    "common": "‚ö™",
                    "uncommon": "üü¢",
                    "rare": "üîµ",
                    "epic": "üü£",
                    "legendary": "üü†",
                    "mythic": "üî¥",
                    "divine": "üü°",
                    "artifact": "‚ö°"
                }

                rarity_icon = rarity_icons.get(item_data.get("rarity", "common"), "‚ö™")
                item_name = f"{rarity_icon} {item_data['name']}"

                # X√°c ƒë·ªãnh vai tr√≤ (ng∆∞·ªùi b√°n ho·∫∑c ng∆∞·ªùi mua)
                is_seller = auction["seller_id"] == ctx.author.id
                role = "Ng∆∞·ªùi b√°n" if is_seller else "Ng∆∞·ªùi ƒë·∫∑t gi√°"

                # L·∫•y th√¥ng tin gi√° cu·ªëi c√πng
                final_price = auction["starting_price"]
                winner = "Kh√¥ng c√≥ ng∆∞·ªùi ƒë·∫∑t gi√°"

                if auction["bids"]:
                    # S·∫Øp x·∫øp c√°c l∆∞·ª£t ƒë·∫∑t gi√° theo gi√° gi·∫£m d·∫ßn
                    sorted_bids = sorted(auction["bids"], key=lambda x: x["amount"], reverse=True)
                    highest_bid = sorted_bids[0]
                    final_price = highest_bid["amount"]

                    # L·∫•y th√¥ng tin ng∆∞·ªùi th·∫Øng
                    winner_id = highest_bid["bidder_id"]
                    winner_user = self.bot.get_user(winner_id)
                    winner = winner_user.name if winner_user else f"Ng∆∞·ªùi d√πng #{winner_id}"

                # X√°c ƒë·ªãnh tr·∫°ng th√°i
                now = datetime.datetime.utcnow()
                status = auction.get("status", "active")

                if status == "active":
                    if auction["end_time"] > now:
                        status_text = "üü¢ ƒêang di·ªÖn ra"
                    else:
                        status_text = "üü° ƒêang x·ª≠ l√Ω k·∫øt qu·∫£"
                elif status == "ended":
                    status_text = "üîµ ƒê√£ k·∫øt th√∫c"
                elif status == "cancelled":
                    status_text = "üî¥ ƒê√£ h·ªßy"
                else:
                    status_text = "‚ö™ Kh√¥ng x√°c ƒë·ªãnh"

                # T·∫°o chu·ªói hi·ªÉn th·ªã th√¥ng tin ƒë·∫•u gi√°
                value = f"**V·∫≠t ph·∫©m:** {item_name} (x{auction['quantity']})\n"
                value += f"**Vai tr√≤:** {role}\n"
                value += f"**Gi√° cu·ªëi c√πng:** {format_number(final_price)} linh th·∫°ch\n"

                if not is_seller:
                    # T√¨m gi√° ƒë·∫∑t cao nh·∫•t c·ªßa ng∆∞·ªùi d√πng
                    user_bids = [bid for bid in auction["bids"] if bid["bidder_id"] == ctx.author.id]
                    if user_bids:
                        user_highest_bid = max(user_bids, key=lambda x: x["amount"])
                        value += f"**Gi√° b·∫°n ƒë·∫∑t:** {format_number(user_highest_bid['amount'])} linh th·∫°ch\n"

                value += f"**Ng∆∞·ªùi th·∫Øng:** {winner}\n"
                value += f"**Tr·∫°ng th√°i:** {status_text}\n"
                value += f"**Th·ªùi gian k·∫øt th√∫c:** {auction['end_time'].strftime('%d/%m/%Y %H:%M:%S')}"

                embed.add_field(
                    name=f"#{i}. {item_name}",
                    value=value,
                    inline=False
                )

        # G·ª≠i embed
        await ctx.send(embed=embed)

    def translate_equipment_slot(self, slot: str) -> str:
        """Chuy·ªÉn ƒë·ªïi v·ªã tr√≠ trang b·ªã sang ti·∫øng Vi·ªát"""
        translations = {
            "weapon": "V≈© kh√≠",
            "armor": "√Åo gi√°p",
            "helmet": "M≈©",
            "boots": "Gi√†y",
            "belt": "ƒêai",
            "necklace": "D√¢y chuy·ªÅn",
            "ring": "Nh·∫´n",
            "talisman": "B√πa h·ªô m·ªánh",
            "spirit_pet": "Linh th√∫"
        }

        return translations.get(slot, "Kh√¥ng x√°c ƒë·ªãnh")

    def translate_stat(self, stat: str) -> str:
        """Chuy·ªÉn ƒë·ªïi t√™n ch·ªâ s·ªë sang ti·∫øng Vi·ªát"""
        translations = {
            "hp": "M√°u",
            "max_hp": "M√°u t·ªëi ƒëa",
            "mp": "Linh l·ª±c",
            "max_mp": "Linh l·ª±c t·ªëi ƒëa",
            "physical_power": "Th√¢n th·ªÉ l·ª±c",
            "spiritual_power": "Th·∫ßn th·ª©c l·ª±c",
            "attack": "C√¥ng k√≠ch",
            "defense": "Ph√≤ng th·ªß",
            "speed": "T·ªëc ƒë·ªô",
            "crit_rate": "T·ª∑ l·ªá b·∫°o k√≠ch",
            "crit_damage": "S√°t th∆∞∆°ng b·∫°o k√≠ch",
            "dodge": "N√© tr√°nh",
            "accuracy": "Ch√≠nh x√°c",
            "elemental_wood": "Nguy√™n t·ªë M·ªôc",
            "elemental_fire": "Nguy√™n t·ªë H·ªèa",
            "elemental_earth": "Nguy√™n t·ªë Th·ªï",
            "elemental_metal": "Nguy√™n t·ªë Kim",
            "elemental_water": "Nguy√™n t·ªë Th·ªßy",
            "elemental_wind": "Nguy√™n t·ªë Phong",
            "elemental_lightning": "Nguy√™n t·ªë L√¥i",
            "elemental_ice": "Nguy√™n t·ªë BƒÉng",
            "elemental_light": "Nguy√™n t·ªë Quang",
            "elemental_dark": "Nguy√™n t·ªë √Åm",
            "resistance_wood": "Kh√°ng M·ªôc",
            "resistance_fire": "Kh√°ng H·ªèa",
            "resistance_earth": "Kh√°ng Th·ªï",
            "resistance_metal": "Kh√°ng Kim",
            "resistance_water": "Kh√°ng Th·ªßy",
            "resistance_wind": "Kh√°ng Phong",
            "resistance_lightning": "Kh√°ng L√¥i",
            "resistance_ice": "Kh√°ng BƒÉng",
            "resistance_light": "Kh√°ng Quang",
            "resistance_dark": "Kh√°ng √Åm",
            "cultivation_speed": "T·ªëc ƒë·ªô tu luy·ªán",
            "exp_bonus": "TƒÉng kinh nghi·ªám",
            "spirit_stone_bonus": "TƒÉng linh th·∫°ch",
            "luck": "May m·∫Øn"
        }

        return translations.get(stat, stat)


def setup(bot):
    bot.add_cog(AuctionCog(bot))
